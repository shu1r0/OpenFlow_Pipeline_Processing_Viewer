// source: net.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.CommandResult', null, global);
goog.exportSymbol('proto.proto.GetTraceRequest', null, global);
goog.exportSymbol('proto.proto.Host', null, global);
goog.exportSymbol('proto.proto.HostCommand', null, global);
goog.exportSymbol('proto.proto.Link', null, global);
goog.exportSymbol('proto.proto.MininetCommand', null, global);
goog.exportSymbol('proto.proto.Packet', null, global);
goog.exportSymbol('proto.proto.PacketArc', null, global);
goog.exportSymbol('proto.proto.PacketTrace', null, global);
goog.exportSymbol('proto.proto.StartTracingRequest', null, global);
goog.exportSymbol('proto.proto.StopTracingRequest', null, global);
goog.exportSymbol('proto.proto.Switch', null, global);
goog.exportSymbol('proto.proto.TopoChangeResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Host = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Host, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Host.displayName = 'proto.proto.Host';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Switch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Switch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Switch.displayName = 'proto.proto.Switch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Link = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Link, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Link.displayName = 'proto.proto.Link';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Packet.displayName = 'proto.proto.Packet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PacketArc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PacketArc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PacketArc.displayName = 'proto.proto.PacketArc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PacketTrace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.PacketTrace.repeatedFields_, null);
};
goog.inherits(proto.proto.PacketTrace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PacketTrace.displayName = 'proto.proto.PacketTrace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.StartTracingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.StartTracingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.StartTracingRequest.displayName = 'proto.proto.StartTracingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.StopTracingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.StopTracingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.StopTracingRequest.displayName = 'proto.proto.StopTracingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetTraceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GetTraceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GetTraceRequest.displayName = 'proto.proto.GetTraceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TopoChangeResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TopoChangeResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TopoChangeResult.displayName = 'proto.proto.TopoChangeResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.HostCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.HostCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.HostCommand.displayName = 'proto.proto.HostCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.MininetCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.MininetCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.MininetCommand.displayName = 'proto.proto.MininetCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CommandResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CommandResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.CommandResult.displayName = 'proto.proto.CommandResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Host.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Host.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Host} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Host.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mac: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Host}
 */
proto.proto.Host.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Host;
  return proto.proto.Host.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Host} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Host}
 */
proto.proto.Host.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Host.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Host.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Host} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Host.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.Host.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Host} returns this
 */
proto.proto.Host.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Host} returns this
 */
proto.proto.Host.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Host.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.proto.Host.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Host} returns this
 */
proto.proto.Host.prototype.setIp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Host} returns this
 */
proto.proto.Host.prototype.clearIp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Host.prototype.hasIp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string mac = 3;
 * @return {string}
 */
proto.proto.Host.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Host} returns this
 */
proto.proto.Host.prototype.setMac = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Host} returns this
 */
proto.proto.Host.prototype.clearMac = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Host.prototype.hasMac = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Switch.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Switch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Switch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Switch.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    datapathId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Switch}
 */
proto.proto.Switch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Switch;
  return proto.proto.Switch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Switch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Switch}
 */
proto.proto.Switch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatapathId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Switch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Switch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Switch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Switch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.Switch.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Switch} returns this
 */
proto.proto.Switch.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Switch} returns this
 */
proto.proto.Switch.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Switch.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string datapath_id = 2;
 * @return {string}
 */
proto.proto.Switch.prototype.getDatapathId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Switch} returns this
 */
proto.proto.Switch.prototype.setDatapathId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Switch} returns this
 */
proto.proto.Switch.prototype.clearDatapathId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Switch.prototype.hasDatapathId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Link.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Link.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Link} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Link.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    host1: jspb.Message.getFieldWithDefault(msg, 2, ""),
    host2: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Link}
 */
proto.proto.Link.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Link;
  return proto.proto.Link.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Link} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Link}
 */
proto.proto.Link.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost1(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Link.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Link.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Link} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Link.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.Link.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Link} returns this
 */
proto.proto.Link.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Link} returns this
 */
proto.proto.Link.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Link.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string host1 = 2;
 * @return {string}
 */
proto.proto.Link.prototype.getHost1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Link} returns this
 */
proto.proto.Link.prototype.setHost1 = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Link} returns this
 */
proto.proto.Link.prototype.clearHost1 = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Link.prototype.hasHost1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string host2 = 3;
 * @return {string}
 */
proto.proto.Link.prototype.getHost2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Link} returns this
 */
proto.proto.Link.prototype.setHost2 = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Link} returns this
 */
proto.proto.Link.prototype.clearHost2 = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Link.prototype.hasHost2 = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    ethDst: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ethSrc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ethType: jspb.Message.getFieldWithDefault(msg, 5, ""),
    vlanVid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    vlanPcp: jspb.Message.getFieldWithDefault(msg, 9, ""),
    ipDscp: jspb.Message.getFieldWithDefault(msg, 11, ""),
    ipEcn: jspb.Message.getFieldWithDefault(msg, 13, ""),
    ipProto: jspb.Message.getFieldWithDefault(msg, 15, ""),
    ipv4Src: jspb.Message.getFieldWithDefault(msg, 17, ""),
    ipv4Dst: jspb.Message.getFieldWithDefault(msg, 19, ""),
    tcpSrc: jspb.Message.getFieldWithDefault(msg, 21, ""),
    tcpDst: jspb.Message.getFieldWithDefault(msg, 23, ""),
    udpSrc: jspb.Message.getFieldWithDefault(msg, 25, ""),
    udpDst: jspb.Message.getFieldWithDefault(msg, 27, ""),
    sctpSrc: jspb.Message.getFieldWithDefault(msg, 29, ""),
    sctpDst: jspb.Message.getFieldWithDefault(msg, 31, ""),
    icmpv4Type: jspb.Message.getFieldWithDefault(msg, 33, ""),
    icmpv4Code: jspb.Message.getFieldWithDefault(msg, 35, ""),
    arpOp: jspb.Message.getFieldWithDefault(msg, 37, ""),
    arpSpa: jspb.Message.getFieldWithDefault(msg, 39, ""),
    arpTpa: jspb.Message.getFieldWithDefault(msg, 41, ""),
    arpSha: jspb.Message.getFieldWithDefault(msg, 43, ""),
    arpTha: jspb.Message.getFieldWithDefault(msg, 45, ""),
    ipv6Src: jspb.Message.getFieldWithDefault(msg, 47, ""),
    ipv6Dst: jspb.Message.getFieldWithDefault(msg, 49, ""),
    ipv6Flabel: jspb.Message.getFieldWithDefault(msg, 51, ""),
    icmpv6Type: jspb.Message.getFieldWithDefault(msg, 53, ""),
    icmpv6Code: jspb.Message.getFieldWithDefault(msg, 55, ""),
    ipv6NdTarget: jspb.Message.getFieldWithDefault(msg, 57, ""),
    ipv6NdSll: jspb.Message.getFieldWithDefault(msg, 59, ""),
    ipv6NdTll: jspb.Message.getFieldWithDefault(msg, 61, ""),
    mplsLabel: jspb.Message.getFieldWithDefault(msg, 63, ""),
    mplsTc: jspb.Message.getFieldWithDefault(msg, 65, ""),
    mplsBos: jspb.Message.getFieldWithDefault(msg, 67, ""),
    pbbIsid: jspb.Message.getFieldWithDefault(msg, 69, ""),
    tunnelId: jspb.Message.getFieldWithDefault(msg, 71, ""),
    ipv6Exthdr: jspb.Message.getFieldWithDefault(msg, 73, ""),
    pbbUca: jspb.Message.getFieldWithDefault(msg, 75, ""),
    tcpFlags: jspb.Message.getFieldWithDefault(msg, 77, ""),
    actsetOutput: jspb.Message.getFieldWithDefault(msg, 101, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Packet}
 */
proto.proto.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Packet;
  return proto.proto.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Packet}
 */
proto.proto.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthDst(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthSrc(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVlanVid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setVlanPcp(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpDscp(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpEcn(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpProto(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv4Src(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv4Dst(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setTcpSrc(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setTcpDst(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setUdpSrc(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setUdpDst(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setSctpSrc(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setSctpDst(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcmpv4Type(value);
      break;
    case 35:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcmpv4Code(value);
      break;
    case 37:
      var value = /** @type {string} */ (reader.readString());
      msg.setArpOp(value);
      break;
    case 39:
      var value = /** @type {string} */ (reader.readString());
      msg.setArpSpa(value);
      break;
    case 41:
      var value = /** @type {string} */ (reader.readString());
      msg.setArpTpa(value);
      break;
    case 43:
      var value = /** @type {string} */ (reader.readString());
      msg.setArpSha(value);
      break;
    case 45:
      var value = /** @type {string} */ (reader.readString());
      msg.setArpTha(value);
      break;
    case 47:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv6Src(value);
      break;
    case 49:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv6Dst(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv6Flabel(value);
      break;
    case 53:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcmpv6Type(value);
      break;
    case 55:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcmpv6Code(value);
      break;
    case 57:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv6NdTarget(value);
      break;
    case 59:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv6NdSll(value);
      break;
    case 61:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv6NdTll(value);
      break;
    case 63:
      var value = /** @type {string} */ (reader.readString());
      msg.setMplsLabel(value);
      break;
    case 65:
      var value = /** @type {string} */ (reader.readString());
      msg.setMplsTc(value);
      break;
    case 67:
      var value = /** @type {string} */ (reader.readString());
      msg.setMplsBos(value);
      break;
    case 69:
      var value = /** @type {string} */ (reader.readString());
      msg.setPbbIsid(value);
      break;
    case 71:
      var value = /** @type {string} */ (reader.readString());
      msg.setTunnelId(value);
      break;
    case 73:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv6Exthdr(value);
      break;
    case 75:
      var value = /** @type {string} */ (reader.readString());
      msg.setPbbUca(value);
      break;
    case 77:
      var value = /** @type {string} */ (reader.readString());
      msg.setTcpFlags(value);
      break;
    case 101:
      var value = /** @type {string} */ (reader.readString());
      msg.setActsetOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeString(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeString(
      19,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeString(
      21,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeString(
      23,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeString(
      25,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeString(
      27,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeString(
      29,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeString(
      31,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 33));
  if (f != null) {
    writer.writeString(
      33,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 35));
  if (f != null) {
    writer.writeString(
      35,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 37));
  if (f != null) {
    writer.writeString(
      37,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 39));
  if (f != null) {
    writer.writeString(
      39,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 41));
  if (f != null) {
    writer.writeString(
      41,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 43));
  if (f != null) {
    writer.writeString(
      43,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 45));
  if (f != null) {
    writer.writeString(
      45,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 47));
  if (f != null) {
    writer.writeString(
      47,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 49));
  if (f != null) {
    writer.writeString(
      49,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 51));
  if (f != null) {
    writer.writeString(
      51,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 53));
  if (f != null) {
    writer.writeString(
      53,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 55));
  if (f != null) {
    writer.writeString(
      55,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 57));
  if (f != null) {
    writer.writeString(
      57,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 59));
  if (f != null) {
    writer.writeString(
      59,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 61));
  if (f != null) {
    writer.writeString(
      61,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 63));
  if (f != null) {
    writer.writeString(
      63,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 65));
  if (f != null) {
    writer.writeString(
      65,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 67));
  if (f != null) {
    writer.writeString(
      67,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 69));
  if (f != null) {
    writer.writeString(
      69,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 71));
  if (f != null) {
    writer.writeString(
      71,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 73));
  if (f != null) {
    writer.writeString(
      73,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 75));
  if (f != null) {
    writer.writeString(
      75,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 77));
  if (f != null) {
    writer.writeString(
      77,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeString(
      101,
      f
    );
  }
};


/**
 * optional string eth_dst = 1;
 * @return {string}
 */
proto.proto.Packet.prototype.getEthDst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setEthDst = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearEthDst = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasEthDst = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string eth_src = 3;
 * @return {string}
 */
proto.proto.Packet.prototype.getEthSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setEthSrc = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearEthSrc = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasEthSrc = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string eth_type = 5;
 * @return {string}
 */
proto.proto.Packet.prototype.getEthType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setEthType = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearEthType = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasEthType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string vlan_vid = 7;
 * @return {string}
 */
proto.proto.Packet.prototype.getVlanVid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setVlanVid = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearVlanVid = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasVlanVid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string vlan_pcp = 9;
 * @return {string}
 */
proto.proto.Packet.prototype.getVlanPcp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setVlanPcp = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearVlanPcp = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasVlanPcp = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string ip_dscp = 11;
 * @return {string}
 */
proto.proto.Packet.prototype.getIpDscp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIpDscp = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIpDscp = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIpDscp = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string ip_ecn = 13;
 * @return {string}
 */
proto.proto.Packet.prototype.getIpEcn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIpEcn = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIpEcn = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIpEcn = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string ip_proto = 15;
 * @return {string}
 */
proto.proto.Packet.prototype.getIpProto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIpProto = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIpProto = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIpProto = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string ipv4_src = 17;
 * @return {string}
 */
proto.proto.Packet.prototype.getIpv4Src = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIpv4Src = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIpv4Src = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIpv4Src = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string ipv4_dst = 19;
 * @return {string}
 */
proto.proto.Packet.prototype.getIpv4Dst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIpv4Dst = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIpv4Dst = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIpv4Dst = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional string tcp_src = 21;
 * @return {string}
 */
proto.proto.Packet.prototype.getTcpSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setTcpSrc = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearTcpSrc = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasTcpSrc = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional string tcp_dst = 23;
 * @return {string}
 */
proto.proto.Packet.prototype.getTcpDst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setTcpDst = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearTcpDst = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasTcpDst = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional string udp_src = 25;
 * @return {string}
 */
proto.proto.Packet.prototype.getUdpSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setUdpSrc = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearUdpSrc = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasUdpSrc = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional string udp_dst = 27;
 * @return {string}
 */
proto.proto.Packet.prototype.getUdpDst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setUdpDst = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearUdpDst = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasUdpDst = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional string sctp_src = 29;
 * @return {string}
 */
proto.proto.Packet.prototype.getSctpSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setSctpSrc = function(value) {
  return jspb.Message.setField(this, 29, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearSctpSrc = function() {
  return jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasSctpSrc = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional string sctp_dst = 31;
 * @return {string}
 */
proto.proto.Packet.prototype.getSctpDst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setSctpDst = function(value) {
  return jspb.Message.setField(this, 31, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearSctpDst = function() {
  return jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasSctpDst = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional string icmpv4_type = 33;
 * @return {string}
 */
proto.proto.Packet.prototype.getIcmpv4Type = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIcmpv4Type = function(value) {
  return jspb.Message.setField(this, 33, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIcmpv4Type = function() {
  return jspb.Message.setField(this, 33, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIcmpv4Type = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional string icmpv4_code = 35;
 * @return {string}
 */
proto.proto.Packet.prototype.getIcmpv4Code = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 35, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIcmpv4Code = function(value) {
  return jspb.Message.setField(this, 35, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIcmpv4Code = function() {
  return jspb.Message.setField(this, 35, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIcmpv4Code = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional string arp_op = 37;
 * @return {string}
 */
proto.proto.Packet.prototype.getArpOp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 37, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setArpOp = function(value) {
  return jspb.Message.setField(this, 37, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearArpOp = function() {
  return jspb.Message.setField(this, 37, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasArpOp = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional string arp_spa = 39;
 * @return {string}
 */
proto.proto.Packet.prototype.getArpSpa = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 39, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setArpSpa = function(value) {
  return jspb.Message.setField(this, 39, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearArpSpa = function() {
  return jspb.Message.setField(this, 39, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasArpSpa = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional string arp_tpa = 41;
 * @return {string}
 */
proto.proto.Packet.prototype.getArpTpa = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 41, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setArpTpa = function(value) {
  return jspb.Message.setField(this, 41, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearArpTpa = function() {
  return jspb.Message.setField(this, 41, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasArpTpa = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * optional string arp_sha = 43;
 * @return {string}
 */
proto.proto.Packet.prototype.getArpSha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 43, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setArpSha = function(value) {
  return jspb.Message.setField(this, 43, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearArpSha = function() {
  return jspb.Message.setField(this, 43, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasArpSha = function() {
  return jspb.Message.getField(this, 43) != null;
};


/**
 * optional string arp_tha = 45;
 * @return {string}
 */
proto.proto.Packet.prototype.getArpTha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 45, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setArpTha = function(value) {
  return jspb.Message.setField(this, 45, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearArpTha = function() {
  return jspb.Message.setField(this, 45, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasArpTha = function() {
  return jspb.Message.getField(this, 45) != null;
};


/**
 * optional string ipv6_src = 47;
 * @return {string}
 */
proto.proto.Packet.prototype.getIpv6Src = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 47, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIpv6Src = function(value) {
  return jspb.Message.setField(this, 47, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIpv6Src = function() {
  return jspb.Message.setField(this, 47, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIpv6Src = function() {
  return jspb.Message.getField(this, 47) != null;
};


/**
 * optional string ipv6_dst = 49;
 * @return {string}
 */
proto.proto.Packet.prototype.getIpv6Dst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 49, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIpv6Dst = function(value) {
  return jspb.Message.setField(this, 49, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIpv6Dst = function() {
  return jspb.Message.setField(this, 49, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIpv6Dst = function() {
  return jspb.Message.getField(this, 49) != null;
};


/**
 * optional string ipv6_flabel = 51;
 * @return {string}
 */
proto.proto.Packet.prototype.getIpv6Flabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIpv6Flabel = function(value) {
  return jspb.Message.setField(this, 51, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIpv6Flabel = function() {
  return jspb.Message.setField(this, 51, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIpv6Flabel = function() {
  return jspb.Message.getField(this, 51) != null;
};


/**
 * optional string icmpv6_type = 53;
 * @return {string}
 */
proto.proto.Packet.prototype.getIcmpv6Type = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 53, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIcmpv6Type = function(value) {
  return jspb.Message.setField(this, 53, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIcmpv6Type = function() {
  return jspb.Message.setField(this, 53, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIcmpv6Type = function() {
  return jspb.Message.getField(this, 53) != null;
};


/**
 * optional string icmpv6_code = 55;
 * @return {string}
 */
proto.proto.Packet.prototype.getIcmpv6Code = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 55, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIcmpv6Code = function(value) {
  return jspb.Message.setField(this, 55, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIcmpv6Code = function() {
  return jspb.Message.setField(this, 55, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIcmpv6Code = function() {
  return jspb.Message.getField(this, 55) != null;
};


/**
 * optional string ipv6_nd_target = 57;
 * @return {string}
 */
proto.proto.Packet.prototype.getIpv6NdTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 57, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIpv6NdTarget = function(value) {
  return jspb.Message.setField(this, 57, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIpv6NdTarget = function() {
  return jspb.Message.setField(this, 57, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIpv6NdTarget = function() {
  return jspb.Message.getField(this, 57) != null;
};


/**
 * optional string ipv6_nd_sll = 59;
 * @return {string}
 */
proto.proto.Packet.prototype.getIpv6NdSll = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 59, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIpv6NdSll = function(value) {
  return jspb.Message.setField(this, 59, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIpv6NdSll = function() {
  return jspb.Message.setField(this, 59, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIpv6NdSll = function() {
  return jspb.Message.getField(this, 59) != null;
};


/**
 * optional string ipv6_nd_tll = 61;
 * @return {string}
 */
proto.proto.Packet.prototype.getIpv6NdTll = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 61, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIpv6NdTll = function(value) {
  return jspb.Message.setField(this, 61, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIpv6NdTll = function() {
  return jspb.Message.setField(this, 61, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIpv6NdTll = function() {
  return jspb.Message.getField(this, 61) != null;
};


/**
 * optional string mpls_label = 63;
 * @return {string}
 */
proto.proto.Packet.prototype.getMplsLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 63, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setMplsLabel = function(value) {
  return jspb.Message.setField(this, 63, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearMplsLabel = function() {
  return jspb.Message.setField(this, 63, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasMplsLabel = function() {
  return jspb.Message.getField(this, 63) != null;
};


/**
 * optional string mpls_tc = 65;
 * @return {string}
 */
proto.proto.Packet.prototype.getMplsTc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 65, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setMplsTc = function(value) {
  return jspb.Message.setField(this, 65, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearMplsTc = function() {
  return jspb.Message.setField(this, 65, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasMplsTc = function() {
  return jspb.Message.getField(this, 65) != null;
};


/**
 * optional string mpls_bos = 67;
 * @return {string}
 */
proto.proto.Packet.prototype.getMplsBos = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 67, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setMplsBos = function(value) {
  return jspb.Message.setField(this, 67, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearMplsBos = function() {
  return jspb.Message.setField(this, 67, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasMplsBos = function() {
  return jspb.Message.getField(this, 67) != null;
};


/**
 * optional string pbb_isid = 69;
 * @return {string}
 */
proto.proto.Packet.prototype.getPbbIsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 69, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setPbbIsid = function(value) {
  return jspb.Message.setField(this, 69, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearPbbIsid = function() {
  return jspb.Message.setField(this, 69, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasPbbIsid = function() {
  return jspb.Message.getField(this, 69) != null;
};


/**
 * optional string tunnel_id = 71;
 * @return {string}
 */
proto.proto.Packet.prototype.getTunnelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 71, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setTunnelId = function(value) {
  return jspb.Message.setField(this, 71, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearTunnelId = function() {
  return jspb.Message.setField(this, 71, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasTunnelId = function() {
  return jspb.Message.getField(this, 71) != null;
};


/**
 * optional string ipv6_exthdr = 73;
 * @return {string}
 */
proto.proto.Packet.prototype.getIpv6Exthdr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 73, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setIpv6Exthdr = function(value) {
  return jspb.Message.setField(this, 73, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearIpv6Exthdr = function() {
  return jspb.Message.setField(this, 73, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasIpv6Exthdr = function() {
  return jspb.Message.getField(this, 73) != null;
};


/**
 * optional string pbb_uca = 75;
 * @return {string}
 */
proto.proto.Packet.prototype.getPbbUca = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 75, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setPbbUca = function(value) {
  return jspb.Message.setField(this, 75, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearPbbUca = function() {
  return jspb.Message.setField(this, 75, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasPbbUca = function() {
  return jspb.Message.getField(this, 75) != null;
};


/**
 * optional string tcp_flags = 77;
 * @return {string}
 */
proto.proto.Packet.prototype.getTcpFlags = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 77, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setTcpFlags = function(value) {
  return jspb.Message.setField(this, 77, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearTcpFlags = function() {
  return jspb.Message.setField(this, 77, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasTcpFlags = function() {
  return jspb.Message.getField(this, 77) != null;
};


/**
 * optional string actset_output = 101;
 * @return {string}
 */
proto.proto.Packet.prototype.getActsetOutput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 101, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setActsetOutput = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearActsetOutput = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Packet.prototype.hasActsetOutput = function() {
  return jspb.Message.getField(this, 101) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PacketArc.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PacketArc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PacketArc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PacketArc.toObject = function(includeInstance, msg) {
  var f, obj = {
    src: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pkt: (f = msg.getPkt()) && proto.proto.Packet.toObject(includeInstance, f),
    dst: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PacketArc}
 */
proto.proto.PacketArc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PacketArc;
  return proto.proto.PacketArc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PacketArc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PacketArc}
 */
proto.proto.PacketArc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrc(value);
      break;
    case 2:
      var value = new proto.proto.Packet;
      reader.readMessage(value,proto.proto.Packet.deserializeBinaryFromReader);
      msg.setPkt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDst(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PacketArc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PacketArc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PacketArc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PacketArc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPkt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Packet.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string src = 1;
 * @return {string}
 */
proto.proto.PacketArc.prototype.getSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.setSrc = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.clearSrc = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketArc.prototype.hasSrc = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Packet pkt = 2;
 * @return {?proto.proto.Packet}
 */
proto.proto.PacketArc.prototype.getPkt = function() {
  return /** @type{?proto.proto.Packet} */ (
    jspb.Message.getWrapperField(this, proto.proto.Packet, 2));
};


/**
 * @param {?proto.proto.Packet|undefined} value
 * @return {!proto.proto.PacketArc} returns this
*/
proto.proto.PacketArc.prototype.setPkt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.clearPkt = function() {
  return this.setPkt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketArc.prototype.hasPkt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string dst = 3;
 * @return {string}
 */
proto.proto.PacketArc.prototype.getDst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.setDst = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.clearDst = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketArc.prototype.hasDst = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.PacketTrace.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PacketTrace.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PacketTrace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PacketTrace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PacketTrace.toObject = function(includeInstance, msg) {
  var f, obj = {
    arcsList: jspb.Message.toObjectList(msg.getArcsList(),
    proto.proto.PacketArc.toObject, includeInstance),
    protocol: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PacketTrace}
 */
proto.proto.PacketTrace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PacketTrace;
  return proto.proto.PacketTrace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PacketTrace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PacketTrace}
 */
proto.proto.PacketTrace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.PacketArc;
      reader.readMessage(value,proto.proto.PacketArc.deserializeBinaryFromReader);
      msg.addArcs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PacketTrace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PacketTrace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PacketTrace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PacketTrace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArcsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.PacketArc.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated PacketArc arcs = 1;
 * @return {!Array<!proto.proto.PacketArc>}
 */
proto.proto.PacketTrace.prototype.getArcsList = function() {
  return /** @type{!Array<!proto.proto.PacketArc>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.PacketArc, 1));
};


/**
 * @param {!Array<!proto.proto.PacketArc>} value
 * @return {!proto.proto.PacketTrace} returns this
*/
proto.proto.PacketTrace.prototype.setArcsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.PacketArc=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.PacketArc}
 */
proto.proto.PacketTrace.prototype.addArcs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.PacketArc, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.PacketTrace} returns this
 */
proto.proto.PacketTrace.prototype.clearArcsList = function() {
  return this.setArcsList([]);
};


/**
 * optional string protocol = 2;
 * @return {string}
 */
proto.proto.PacketTrace.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.PacketTrace} returns this
 */
proto.proto.PacketTrace.prototype.setProtocol = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.PacketTrace} returns this
 */
proto.proto.PacketTrace.prototype.clearProtocol = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketTrace.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.StartTracingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.StartTracingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.StartTracingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StartTracingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    option: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.StartTracingRequest}
 */
proto.proto.StartTracingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.StartTracingRequest;
  return proto.proto.StartTracingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.StartTracingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.StartTracingRequest}
 */
proto.proto.StartTracingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setOption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.StartTracingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.StartTracingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.StartTracingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StartTracingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
};


/**
 * optional sint32 option = 1;
 * @return {number}
 */
proto.proto.StartTracingRequest.prototype.getOption = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.StartTracingRequest} returns this
 */
proto.proto.StartTracingRequest.prototype.setOption = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.StartTracingRequest} returns this
 */
proto.proto.StartTracingRequest.prototype.clearOption = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.StartTracingRequest.prototype.hasOption = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.StopTracingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.StopTracingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.StopTracingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StopTracingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    option: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.StopTracingRequest}
 */
proto.proto.StopTracingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.StopTracingRequest;
  return proto.proto.StopTracingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.StopTracingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.StopTracingRequest}
 */
proto.proto.StopTracingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setOption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.StopTracingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.StopTracingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.StopTracingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StopTracingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
};


/**
 * optional sint32 option = 1;
 * @return {number}
 */
proto.proto.StopTracingRequest.prototype.getOption = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.StopTracingRequest} returns this
 */
proto.proto.StopTracingRequest.prototype.setOption = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.StopTracingRequest} returns this
 */
proto.proto.StopTracingRequest.prototype.clearOption = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.StopTracingRequest.prototype.hasOption = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetTraceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetTraceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetTraceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetTraceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    option: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetTraceRequest}
 */
proto.proto.GetTraceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetTraceRequest;
  return proto.proto.GetTraceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetTraceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetTraceRequest}
 */
proto.proto.GetTraceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setOption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetTraceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GetTraceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetTraceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetTraceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
};


/**
 * optional sint32 option = 1;
 * @return {number}
 */
proto.proto.GetTraceRequest.prototype.getOption = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.GetTraceRequest} returns this
 */
proto.proto.GetTraceRequest.prototype.setOption = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.GetTraceRequest} returns this
 */
proto.proto.GetTraceRequest.prototype.clearOption = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.GetTraceRequest.prototype.hasOption = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TopoChangeResult.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TopoChangeResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TopoChangeResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TopoChangeResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TopoChangeResult}
 */
proto.proto.TopoChangeResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TopoChangeResult;
  return proto.proto.TopoChangeResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TopoChangeResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TopoChangeResult}
 */
proto.proto.TopoChangeResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TopoChangeResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TopoChangeResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TopoChangeResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TopoChangeResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
};


/**
 * optional sint32 status = 1;
 * @return {number}
 */
proto.proto.TopoChangeResult.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.TopoChangeResult} returns this
 */
proto.proto.TopoChangeResult.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.TopoChangeResult} returns this
 */
proto.proto.TopoChangeResult.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TopoChangeResult.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.HostCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.HostCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.HostCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.HostCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    command: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.HostCommand}
 */
proto.proto.HostCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.HostCommand;
  return proto.proto.HostCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.HostCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.HostCommand}
 */
proto.proto.HostCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.HostCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.HostCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.HostCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.HostCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.proto.HostCommand.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.HostCommand} returns this
 */
proto.proto.HostCommand.prototype.setHost = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.HostCommand} returns this
 */
proto.proto.HostCommand.prototype.clearHost = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.HostCommand.prototype.hasHost = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string command = 2;
 * @return {string}
 */
proto.proto.HostCommand.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.HostCommand} returns this
 */
proto.proto.HostCommand.prototype.setCommand = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.HostCommand} returns this
 */
proto.proto.HostCommand.prototype.clearCommand = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.HostCommand.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.MininetCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.MininetCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.MininetCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.MininetCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.MininetCommand}
 */
proto.proto.MininetCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.MininetCommand;
  return proto.proto.MininetCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.MininetCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.MininetCommand}
 */
proto.proto.MininetCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.MininetCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.MininetCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.MininetCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.MininetCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string command = 1;
 * @return {string}
 */
proto.proto.MininetCommand.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.MininetCommand} returns this
 */
proto.proto.MininetCommand.prototype.setCommand = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.MininetCommand} returns this
 */
proto.proto.MininetCommand.prototype.clearCommand = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.MininetCommand.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CommandResult.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CommandResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CommandResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CommandResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CommandResult}
 */
proto.proto.CommandResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CommandResult;
  return proto.proto.CommandResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CommandResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CommandResult}
 */
proto.proto.CommandResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CommandResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CommandResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CommandResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CommandResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.proto.CommandResult.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.CommandResult} returns this
 */
proto.proto.CommandResult.prototype.setResult = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.CommandResult} returns this
 */
proto.proto.CommandResult.prototype.clearResult = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CommandResult.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.proto);
