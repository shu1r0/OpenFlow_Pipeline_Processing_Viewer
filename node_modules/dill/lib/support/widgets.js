(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = function() {
    var World;
    World = this;
    this.Widgets = {};
    this.Widget = (function() {
      Widget.extend = function(protoProps, staticProps) {
        var Surrogate, child, parent;
        parent = this;
        if (Object.hasOwnProperty(protoProps, 'constructor')) {
          child = protoProps.constructor;
        } else {
          child = function() {
            return parent.apply(this, arguments);
          };
        }
        child.copyProperties(this);
        child.copyProperties(staticProps);
        Surrogate = function() {
          this.constructor = child;
          return void 0;
        };
        Surrogate.prototype = this.prototype;
        child.prototype = new Surrogate();
        if (protoProps) {
          child.prototype.copyProperties(protoProps);
        }
        child.__super__ = this.prototype;
        return child;
      };

      Widget.find = function(attributes) {
        var _this;
        _this = _.extend(new this, attributes);
        return _this.find().then(function(el) {
          _this.el = el;
          return _this;
        });
      };

      function Widget(attributes) {
        if (attributes == null) {
          attributes = {};
        }
        _.extend(this, attributes);
        this.initialize.apply(this, arguments);
      }

      Widget.prototype.initialize = function() {};

      Widget.prototype.world = World;

      Widget.getter('driver', function() {
        return this._driver || World.driver;
      });

      Widget.prototype.click = function(selector) {
        return this.find(selector).click();
      };

      Widget.prototype.fill = function() {
        var args;
        args = arguments;
        if (args.length > 1) {
          return this.find(args[0]).then(function(el) {
            return el.clear().then(function() {
              return el.sendKeys(args[1]);
            });
          });
        } else {
          return this.find().then(function(el) {
            return el.sendKeys(args[0]);
          });
        }
      };

      Widget.prototype.read = function(selector, transformer) {
        var selected;
        transformer || (transformer = function(value) {
          return value;
        });
        selected = this.find(selector);
        return selected.getAttribute('value').then(function(value) {
          if (value) {
            return transformer(value);
          } else {
            return selected.getText().then(transformer);
          }
        });
      };

      Widget.prototype.find = function(selector) {
        var deferred;
        deferred = new $.Deferred;
        if (this.el) {
          if (!selector) {
            deferred.fulfill(this.el);
          } else {
            return this.el.findElement(Driver.By.css(selector));
          }
          return deferred;
        }
        this._ensureElement(selector);
        return this.driver.findElement(Driver.By.css(this._selector(selector)));
      };

      Widget.prototype.getHtml = function(selector) {
        return this.find(selector).then(function(el) {
          return el.getOuterHtml();
        });
      };

      Widget.prototype.getText = function(selector) {
        return this.find(selector).then(function(el) {
          return el.getText();
        });
      };

      Widget.prototype.getAttribute = function(attribute) {
        return this.find().then(function(el) {
          return el.getAttribute(attribute);
        });
      };

      Widget.prototype.isPresent = function(selector) {
        return this.driver.isElementPresent(Driver.By.css(this._selector(selector)));
      };

      Widget.prototype.isVisible = function(selector) {
        return this.find(selector).then(function(elm) {
          return elm.isDisplayed();
        });
      };

      Widget.prototype.findAll = function(selector) {
        return this.driver.findElements(Driver.By.css(this._selector(selector)));
      };

      Widget.prototype._selector = function(selector) {
        return this.root + (selector ? " " + selector : '');
      };

      Widget.prototype.findByText = function(text) {
        return this.find().then(function(el) {
          return el.findElement(Driver.By.xpath('.//*[normalize-space(text())=normalize-space("' + text + '")]'));
        });
      };

      Widget.prototype._ensureElement = function(selector) {
        return this.driver.wait(_.bind(this.isPresent, this, selector), 10000, "" + (this._selector(selector)) + " not found");
      };

      Widget.prototype._map = function(collection, callback) {
        var results, _reduce;
        results = [];
        _reduce = function(p, f, i) {
          return p.then(function() {
            return callback(f, i).then(function(v) {
              return results.push(v);
            });
          });
        };
        return _.reduce(collection, _reduce, Driver.promise.fulfilled()).then(function() {
          return results;
        });
      };

      Widget.prototype.sendKeys = function() {
        var args;
        args = arguments;
        return this.find().then((function(_this) {
          return function(el) {
            return el.sendKeys.apply(el, args);
          };
        })(this));
      };

      return Widget;

    })();
    this.Widget.List = (function(_super) {
      __extends(List, _super);

      function List() {
        return List.__super__.constructor.apply(this, arguments);
      }

      List.prototype.itemSelector = 'li';

      List.prototype.itemClass = World.Widget;

      List.prototype.at = function(index) {
        return this.items().then(function(items) {
          return items[index];
        });
      };

      List.prototype.map = function(iter) {
        return this.items().then(function(items) {
          return $.map(items, iter);
        });
      };

      List.prototype.filter = function(iter) {
        return this.items().then(function(items) {
          return $.filter(items, iter);
        });
      };

      List.prototype.items = function() {
        return this.find().then((function(_this) {
          return function(el) {
            return el.findElements(Driver.By.css(_this.itemSelector));
          };
        })(this)).then((function(_this) {
          return function(elms) {
            return _.map(elms, function(el) {
              return new _this.itemClass({
                el: el
              });
            });
          };
        })(this));
      };

      List.prototype.findWhere = function(iter) {
        return this.filter(iter).then(function(items) {
          if (items) {
            return items[0];
          }
        });
      };

      return List;

    })(this.Widget);
    this.Widget.Fields = (function(_super) {
      __extends(Fields, _super);

      function Fields() {
        return Fields.__super__.constructor.apply(this, arguments);
      }

      Fields.prototype.fillAll = function(values) {
        return this._map(Object.keys(values), (function(_this) {
          return function(f) {
            return _this.fill(_this._name(f), values[f]);
          };
        })(this));
      };

      Fields.prototype.readAll = function() {
        var _readAll;
        _readAll = (function(_this) {
          return function(f) {
            return _this.read(_this._name(f)).then(function(v) {
              return [f, v];
            });
          };
        })(this);
        return this._map(this.fields, _readAll).then(function(read) {
          return _.object(read);
        });
      };

      Fields.prototype._name = function(name) {
        return "[name='" + name + "']";
      };

      Fields.prototype._type = function(type) {
        return "[type='" + type + "']";
      };

      return Fields;

    })(this.Widget);
    this.Widget.Form = (function(_super) {
      __extends(Form, _super);

      function Form() {
        this.submitWith = __bind(this.submitWith, this);
        return Form.__super__.constructor.apply(this, arguments);
      }

      Form.prototype.root = 'form';

      Form.prototype.submitSelector = function() {
        return this._type('submit');
      };

      Form.prototype.submitWith = function(values) {
        this.fillAll(values);
        return this.click(this.submitSelector());
      };

      return Form;

    })(this.Widget.Fields);
    this.Widget.View = (function(_super) {
      __extends(View, _super);

      function View(attributes) {
        if (attributes == null) {
          attributes = {};
        }
        if (attributes.regionPath == null) {
          throw new Error("A Widget.View requires regionPath");
        }
        View.__super__.constructor.apply(this, arguments);
      }

      View.prototype.ui = function(ui) {
        var region, regions, stmt, viewPath;
        if (ui == null) {
          throw new Error("A UI selector is required");
        }
        regions = this.regionPath.split(".");
        viewPath = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = regions.length; _i < _len; _i++) {
            region = regions[_i];
            _results.push("" + region + ".currentView");
          }
          return _results;
        })()).join(".");
        stmt = "return " + (this.appPath ? this.appPath + '.' : '') + viewPath + ".ui." + ui + ".get(0)";
        return this.driver.executeScript(stmt);
      };

      return View;

    })(this.Widget);
    return this.Widget.Iframe = (function(_super) {
      __extends(Iframe, _super);

      function Iframe() {
        return Iframe.__super__.constructor.apply(this, arguments);
      }

      Iframe.prototype.root = 'iframe';

      Iframe.prototype.focus = function() {
        return this.driver.switchTo().frame(this.find()).then((function(_this) {
          return function() {
            return _this;
          };
        })(this));
      };

      Iframe.prototype.unfocus = function() {
        return this.driver.switchTo().defaultContent().then((function(_this) {
          return function() {
            return _this;
          };
        })(this));
      };

      return Iframe;

    })(this.Widget);
  };

}).call(this);
