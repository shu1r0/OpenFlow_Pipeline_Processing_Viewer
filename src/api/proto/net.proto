/**
 * これは，システムで使用するメッセージの構造を記述したものです．
 * ここで書かれたものを基準にして，各インターフェースを記述します．
 *
 * Notes:
 *     * あくまで，システム上で使用するものなので完全にOpenFlowプロトコルに準拠しているわけではない．
 *
 * TODO:
 *    * テーブルの要素は単純にdictで読ませるのもあり
 *    * フローエントリに関しては，goto tableと action set apply action を分けて保存すればいいのでは？？？
 */

syntax = "proto3";

package proto;

/**
 * Host structure
 */
message Host{
  optional string name = 1;
  optional string ip = 2;
  optional string mac = 3;
}

/**
 * Switch
 */
message Switch{
  optional string name = 1;
  optional string datapath_id = 2;
}

/**
 * Link
 */
message Link{
  optional string name = 1;
  optional string host1 = 2;
  optional string host2 = 3;
}

/**
 * Packet
 */
message Packet{
  map<string, string> fields = 1;

//  optional string eth_dst = 1;
//  optional string eth_src = 3;
//  optional string eth_type = 5;
//  optional string vlan_vid = 7;
//  optional string vlan_pcp = 9;
//  optional string ip_dscp = 11;
//  optional string ip_ecn = 13;
//  optional string ip_proto = 15;
//  optional string ipv4_src = 17;
//  optional string ipv4_dst = 19;
//  optional string tcp_src = 21;
//  optional string tcp_dst  = 23;
//  optional string udp_src = 25;
//  optional string udp_dst = 27;
//  optional string sctp_src = 29;
//  optional string sctp_dst = 31;
//  optional string icmpv4_type = 33;
//  optional string icmpv4_code = 35;
//  optional string arp_op = 37;
//  optional string arp_spa = 39;
//  optional string arp_tpa = 41;
//  optional string arp_sha = 43;
//  optional string arp_tha = 45;
//  optional string ipv6_src = 47;
//  optional string ipv6_dst = 49;
//  optional string ipv6_flabel = 51;
//  optional string icmpv6_type = 53;
//  optional string icmpv6_code = 55;
//  optional string ipv6_nd_target = 57;
//  optional string ipv6_nd_sll = 59;
//  optional string ipv6_nd_tll = 61;
//  optional string mpls_label = 63;
//  optional string mpls_tc = 65;
//  optional string mpls_bos = 67;
//  optional string pbb_isid = 69;
//  optional string tunnel_id = 71;
//  optional string ipv6_exthdr = 73;
//  optional string pbb_uca = 75;
//  optional string tcp_flags = 77;
//  optional string actset_output = 101;
}

/**
 * OpenFlow Instruction Type
 *
 * Notes:
 *    * 対応していないものも含まれています．
 */
enum InstructionType {
    OFPIT_INVALID    = 0;
    OFPIT_GOTO_TABLE = 1;
    OFPIT_WRITE_METADATA = 2;
    OFPIT_WRITE_ACTIONS = 3;
    OFPIT_APPLY_ACTIONS = 4;
    OFPIT_CLEAR_ACTIONS = 5;
    OFPIT_METER = 6;

    OFPIT_EXPERIMENTER = 0xFFFF;
};

/**
 * OpenFlow Action struct
 */
message Action {
  /**
   * action string
   * これは可視化するだけなので，とりあえず文字列だけでいいのでは???
   */
  optional string str = 1;
}

/**
 * OpenFlow Instruction struct
 */
message Instruction{
  optional InstructionType type = 1;
  oneof data {
    InstructionGotoTable goto_table = 2;
    InstructionWriteMetadata write_metadata = 3;
    InstructionActions actions = 4;
    InstructionMeter meter = 5;
  }
}

/**
 * Instruction Goto Table
 */
message InstructionGotoTable{
  uint32 table_id = 1;
}

/**
 * Instruction Metadata
 */
message InstructionWriteMetadata{
  uint32 metadata = 1;
  uint32 metadata_mask = 2;
}

/**
 * Instruction for WRITE_ACTIONS/APPLY_ACTIONS/CLEAR_ACTIONS
 */
message InstructionActions{
  repeated Action actions = 1;
}

/**
 * Instruction Meter
 */
message InstructionMeter{
  uint32 meter_id = 1;
}

/**
 * OpenFlow Match struct
 */
message Match{
  optional string field_name = 1;
  optional string value = 2;
  optional string mask = 3;
}

/**
 * Flow struct
 */
message Flow{
  optional string cookie = 1;
  optional sint32 duration = 2;
  optional sint32 table = 3;
  optional sint32 n_packets = 4;
  optional sint32 n_bytes = 5;
  optional sint32 priority = 6;
  repeated Match match = 7;
  repeated Instruction actions = 8;
  /**
   * flow identifier on the system
   */
  optional sint32 flow_id = 9;
}

/**
 * Flow Table structure
 */
message FlowTable{
  repeated Flow flows = 1;
}

/**
 * Packet OpenFlow Pipeline Processing structure
 */
message PacketProcessing{
  optional string switch = 1;
  optional FlowTable flow_table = 4;
  repeated Packet pkts = 2;
  repeated sint32 matched_flows = 3;
}

// TODO 将来変える
/*
 * なんか，マッチしたアクション欲しくね？？

 ソース化dstどちらかで，どのように処理されたかの情報を内包したい
 */
message PacketArc{
  optional string src = 1;
  optional Packet pkt = 2;
  optional PacketProcessing packet_processing = 4;
  optional string edge = 5;
  optional string dst = 3;
  optional string dst_interface = 6;
}


message PacketTrace{
  repeated PacketArc arcs = 1;
  optional string protocol = 2;
}

//message Port{
//
//}

message StartTracingRequest {
  optional sint32 option = 1;
}

message StopTracingRequest {
  optional sint32 option = 1;
}

message GetTraceRequest {
  optional sint32 option = 1;
}

message GetTraceResult {
  repeated PacketTrace packet_traces = 1;
}

message TopoChangeResult{
  optional sint32 status = 1;
}

message HostCommand{
  optional string host = 1;
  optional string command = 2;
}

message MininetCommand{
  optional string command = 1;
}

/**
 * comment result type
 */
enum CommandResultType{
  OUTPUT = 0;
  ERROR = 1;
  END_SIGNAL = 100;
}

message CommandResult {
  optional CommandResultType type = 1;
  optional string result = 2;
}
