// source: net.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.Action', null, global);
goog.exportSymbol('proto.proto.ActionSet', null, global);
goog.exportSymbol('proto.proto.ChangeTopologyRequest', null, global);
goog.exportSymbol('proto.proto.CommandResult', null, global);
goog.exportSymbol('proto.proto.CommandResultType', null, global);
goog.exportSymbol('proto.proto.CommandType', null, global);
goog.exportSymbol('proto.proto.Flow', null, global);
goog.exportSymbol('proto.proto.FlowTable', null, global);
goog.exportSymbol('proto.proto.GetFeaturesRequest', null, global);
goog.exportSymbol('proto.proto.GetTraceRequest', null, global);
goog.exportSymbol('proto.proto.GetTraceResult', null, global);
goog.exportSymbol('proto.proto.Host', null, global);
goog.exportSymbol('proto.proto.HostCommand', null, global);
goog.exportSymbol('proto.proto.Instruction', null, global);
goog.exportSymbol('proto.proto.Instruction.DataCase', null, global);
goog.exportSymbol('proto.proto.InstructionActions', null, global);
goog.exportSymbol('proto.proto.InstructionGotoTable', null, global);
goog.exportSymbol('proto.proto.InstructionMeter', null, global);
goog.exportSymbol('proto.proto.InstructionType', null, global);
goog.exportSymbol('proto.proto.InstructionWriteMetadata', null, global);
goog.exportSymbol('proto.proto.Link', null, global);
goog.exportSymbol('proto.proto.Match', null, global);
goog.exportSymbol('proto.proto.MininetCommand', null, global);
goog.exportSymbol('proto.proto.Packet', null, global);
goog.exportSymbol('proto.proto.PacketArc', null, global);
goog.exportSymbol('proto.proto.PacketProcessing', null, global);
goog.exportSymbol('proto.proto.PacketTrace', null, global);
goog.exportSymbol('proto.proto.RemoteController', null, global);
goog.exportSymbol('proto.proto.StartNetworkOption', null, global);
goog.exportSymbol('proto.proto.StartNetworkRequest', null, global);
goog.exportSymbol('proto.proto.StartTracingRequest', null, global);
goog.exportSymbol('proto.proto.StopTracingRequest', null, global);
goog.exportSymbol('proto.proto.Switch', null, global);
goog.exportSymbol('proto.proto.TopoChangeResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Host = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Host, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Host.displayName = 'proto.proto.Host';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Switch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Switch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Switch.displayName = 'proto.proto.Switch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Link = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Link, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Link.displayName = 'proto.proto.Link';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RemoteController = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RemoteController, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RemoteController.displayName = 'proto.proto.RemoteController';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Packet.displayName = 'proto.proto.Packet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Action.displayName = 'proto.proto.Action';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ActionSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ActionSet.repeatedFields_, null);
};
goog.inherits(proto.proto.ActionSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ActionSet.displayName = 'proto.proto.ActionSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Instruction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.Instruction.oneofGroups_);
};
goog.inherits(proto.proto.Instruction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Instruction.displayName = 'proto.proto.Instruction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.InstructionGotoTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.InstructionGotoTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.InstructionGotoTable.displayName = 'proto.proto.InstructionGotoTable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.InstructionWriteMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.InstructionWriteMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.InstructionWriteMetadata.displayName = 'proto.proto.InstructionWriteMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.InstructionActions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.InstructionActions.repeatedFields_, null);
};
goog.inherits(proto.proto.InstructionActions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.InstructionActions.displayName = 'proto.proto.InstructionActions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.InstructionMeter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.InstructionMeter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.InstructionMeter.displayName = 'proto.proto.InstructionMeter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Match = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Match, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Match.displayName = 'proto.proto.Match';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Flow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Flow.repeatedFields_, null);
};
goog.inherits(proto.proto.Flow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Flow.displayName = 'proto.proto.Flow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FlowTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.FlowTable.repeatedFields_, null);
};
goog.inherits(proto.proto.FlowTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FlowTable.displayName = 'proto.proto.FlowTable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PacketProcessing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.PacketProcessing.repeatedFields_, null);
};
goog.inherits(proto.proto.PacketProcessing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PacketProcessing.displayName = 'proto.proto.PacketProcessing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PacketArc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PacketArc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PacketArc.displayName = 'proto.proto.PacketArc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PacketTrace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.PacketTrace.repeatedFields_, null);
};
goog.inherits(proto.proto.PacketTrace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PacketTrace.displayName = 'proto.proto.PacketTrace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ChangeTopologyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ChangeTopologyRequest.repeatedFields_, null);
};
goog.inherits(proto.proto.ChangeTopologyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ChangeTopologyRequest.displayName = 'proto.proto.ChangeTopologyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetFeaturesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.GetFeaturesRequest.repeatedFields_, null);
};
goog.inherits(proto.proto.GetFeaturesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GetFeaturesRequest.displayName = 'proto.proto.GetFeaturesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.StartNetworkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.StartNetworkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.StartNetworkRequest.displayName = 'proto.proto.StartNetworkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.StartTracingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.StartTracingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.StartTracingRequest.displayName = 'proto.proto.StartTracingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.StopTracingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.StopTracingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.StopTracingRequest.displayName = 'proto.proto.StopTracingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetTraceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GetTraceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GetTraceRequest.displayName = 'proto.proto.GetTraceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetTraceResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.GetTraceResult.repeatedFields_, null);
};
goog.inherits(proto.proto.GetTraceResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GetTraceResult.displayName = 'proto.proto.GetTraceResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TopoChangeResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TopoChangeResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TopoChangeResult.displayName = 'proto.proto.TopoChangeResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.HostCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.HostCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.HostCommand.displayName = 'proto.proto.HostCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.MininetCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.MininetCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.MininetCommand.displayName = 'proto.proto.MininetCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CommandResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CommandResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.CommandResult.displayName = 'proto.proto.CommandResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Host.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Host.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Host} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Host.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mac: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Host}
 */
proto.proto.Host.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Host;
  return proto.proto.Host.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Host} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Host}
 */
proto.proto.Host.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Host.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Host.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Host} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Host.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.Host.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Host} returns this
 */
proto.proto.Host.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Host} returns this
 */
proto.proto.Host.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Host.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.proto.Host.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Host} returns this
 */
proto.proto.Host.prototype.setIp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Host} returns this
 */
proto.proto.Host.prototype.clearIp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Host.prototype.hasIp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string mac = 3;
 * @return {string}
 */
proto.proto.Host.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Host} returns this
 */
proto.proto.Host.prototype.setMac = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Host} returns this
 */
proto.proto.Host.prototype.clearMac = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Host.prototype.hasMac = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Switch.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Switch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Switch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Switch.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    datapathId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Switch}
 */
proto.proto.Switch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Switch;
  return proto.proto.Switch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Switch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Switch}
 */
proto.proto.Switch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatapathId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Switch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Switch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Switch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Switch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.Switch.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Switch} returns this
 */
proto.proto.Switch.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Switch} returns this
 */
proto.proto.Switch.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Switch.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string datapath_id = 2;
 * @return {string}
 */
proto.proto.Switch.prototype.getDatapathId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Switch} returns this
 */
proto.proto.Switch.prototype.setDatapathId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Switch} returns this
 */
proto.proto.Switch.prototype.clearDatapathId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Switch.prototype.hasDatapathId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Link.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Link.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Link} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Link.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    host1: jspb.Message.getFieldWithDefault(msg, 2, ""),
    host2: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Link}
 */
proto.proto.Link.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Link;
  return proto.proto.Link.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Link} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Link}
 */
proto.proto.Link.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost1(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Link.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Link.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Link} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Link.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.Link.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Link} returns this
 */
proto.proto.Link.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Link} returns this
 */
proto.proto.Link.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Link.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string host1 = 2;
 * @return {string}
 */
proto.proto.Link.prototype.getHost1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Link} returns this
 */
proto.proto.Link.prototype.setHost1 = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Link} returns this
 */
proto.proto.Link.prototype.clearHost1 = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Link.prototype.hasHost1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string host2 = 3;
 * @return {string}
 */
proto.proto.Link.prototype.getHost2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Link} returns this
 */
proto.proto.Link.prototype.setHost2 = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Link} returns this
 */
proto.proto.Link.prototype.clearHost2 = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Link.prototype.hasHost2 = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RemoteController.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RemoteController.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RemoteController} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RemoteController.toObject = function(includeInstance, msg) {
  var f, obj = {
    controllerIp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    controllerPort: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RemoteController}
 */
proto.proto.RemoteController.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RemoteController;
  return proto.proto.RemoteController.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RemoteController} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RemoteController}
 */
proto.proto.RemoteController.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setControllerIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setControllerPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RemoteController.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RemoteController.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RemoteController} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RemoteController.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControllerIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getControllerPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string controller_ip = 1;
 * @return {string}
 */
proto.proto.RemoteController.prototype.getControllerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.RemoteController} returns this
 */
proto.proto.RemoteController.prototype.setControllerIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 controller_port = 2;
 * @return {number}
 */
proto.proto.RemoteController.prototype.getControllerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.RemoteController} returns this
 */
proto.proto.RemoteController.prototype.setControllerPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    inPort: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inPhyPort: jspb.Message.getFieldWithDefault(msg, 4, ""),
    fieldsMap: (f = msg.getFieldsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Packet}
 */
proto.proto.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Packet;
  return proto.proto.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Packet}
 */
proto.proto.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInPort(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInPhyPort(value);
      break;
    case 1:
      var value = msg.getFieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getInPort();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInPhyPort();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional float timestamp = 2;
 * @return {number}
 */
proto.proto.Packet.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string in_port = 3;
 * @return {string}
 */
proto.proto.Packet.prototype.getInPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setInPort = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string in_phy_port = 4;
 * @return {string}
 */
proto.proto.Packet.prototype.getInPhyPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.setInPhyPort = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * map<string, string> fields = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.proto.Packet.prototype.getFieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.Packet} returns this
 */
proto.proto.Packet.prototype.clearFieldsMap = function() {
  this.getFieldsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    str: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Action}
 */
proto.proto.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Action;
  return proto.proto.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Action}
 */
proto.proto.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string str = 1;
 * @return {string}
 */
proto.proto.Action.prototype.getStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Action} returns this
 */
proto.proto.Action.prototype.setStr = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Action} returns this
 */
proto.proto.Action.prototype.clearStr = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Action.prototype.hasStr = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ActionSet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ActionSet.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ActionSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ActionSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ActionSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.proto.Action.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ActionSet}
 */
proto.proto.ActionSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ActionSet;
  return proto.proto.ActionSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ActionSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ActionSet}
 */
proto.proto.ActionSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Action;
      reader.readMessage(value,proto.proto.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ActionSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ActionSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ActionSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ActionSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Action.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Action actions = 1;
 * @return {!Array<!proto.proto.Action>}
 */
proto.proto.ActionSet.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.proto.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Action, 1));
};


/**
 * @param {!Array<!proto.proto.Action>} value
 * @return {!proto.proto.ActionSet} returns this
*/
proto.proto.ActionSet.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Action}
 */
proto.proto.ActionSet.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Action, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.ActionSet} returns this
 */
proto.proto.ActionSet.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.Instruction.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.proto.Instruction.DataCase = {
  DATA_NOT_SET: 0,
  GOTO_TABLE: 2,
  WRITE_METADATA: 3,
  ACTIONS: 4,
  METER: 5
};

/**
 * @return {proto.proto.Instruction.DataCase}
 */
proto.proto.Instruction.prototype.getDataCase = function() {
  return /** @type {proto.proto.Instruction.DataCase} */(jspb.Message.computeOneofCase(this, proto.proto.Instruction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Instruction.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Instruction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Instruction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Instruction.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gotoTable: (f = msg.getGotoTable()) && proto.proto.InstructionGotoTable.toObject(includeInstance, f),
    writeMetadata: (f = msg.getWriteMetadata()) && proto.proto.InstructionWriteMetadata.toObject(includeInstance, f),
    actions: (f = msg.getActions()) && proto.proto.InstructionActions.toObject(includeInstance, f),
    meter: (f = msg.getMeter()) && proto.proto.InstructionMeter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Instruction}
 */
proto.proto.Instruction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Instruction;
  return proto.proto.Instruction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Instruction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Instruction}
 */
proto.proto.Instruction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.InstructionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.proto.InstructionGotoTable;
      reader.readMessage(value,proto.proto.InstructionGotoTable.deserializeBinaryFromReader);
      msg.setGotoTable(value);
      break;
    case 3:
      var value = new proto.proto.InstructionWriteMetadata;
      reader.readMessage(value,proto.proto.InstructionWriteMetadata.deserializeBinaryFromReader);
      msg.setWriteMetadata(value);
      break;
    case 4:
      var value = new proto.proto.InstructionActions;
      reader.readMessage(value,proto.proto.InstructionActions.deserializeBinaryFromReader);
      msg.setActions(value);
      break;
    case 5:
      var value = new proto.proto.InstructionMeter;
      reader.readMessage(value,proto.proto.InstructionMeter.deserializeBinaryFromReader);
      msg.setMeter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Instruction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Instruction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Instruction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Instruction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.proto.InstructionType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getGotoTable();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.InstructionGotoTable.serializeBinaryToWriter
    );
  }
  f = message.getWriteMetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.InstructionWriteMetadata.serializeBinaryToWriter
    );
  }
  f = message.getActions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.InstructionActions.serializeBinaryToWriter
    );
  }
  f = message.getMeter();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.InstructionMeter.serializeBinaryToWriter
    );
  }
};


/**
 * optional InstructionType type = 1;
 * @return {!proto.proto.InstructionType}
 */
proto.proto.Instruction.prototype.getType = function() {
  return /** @type {!proto.proto.InstructionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.InstructionType} value
 * @return {!proto.proto.Instruction} returns this
 */
proto.proto.Instruction.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Instruction} returns this
 */
proto.proto.Instruction.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Instruction.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InstructionGotoTable goto_table = 2;
 * @return {?proto.proto.InstructionGotoTable}
 */
proto.proto.Instruction.prototype.getGotoTable = function() {
  return /** @type{?proto.proto.InstructionGotoTable} */ (
    jspb.Message.getWrapperField(this, proto.proto.InstructionGotoTable, 2));
};


/**
 * @param {?proto.proto.InstructionGotoTable|undefined} value
 * @return {!proto.proto.Instruction} returns this
*/
proto.proto.Instruction.prototype.setGotoTable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.Instruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Instruction} returns this
 */
proto.proto.Instruction.prototype.clearGotoTable = function() {
  return this.setGotoTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Instruction.prototype.hasGotoTable = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InstructionWriteMetadata write_metadata = 3;
 * @return {?proto.proto.InstructionWriteMetadata}
 */
proto.proto.Instruction.prototype.getWriteMetadata = function() {
  return /** @type{?proto.proto.InstructionWriteMetadata} */ (
    jspb.Message.getWrapperField(this, proto.proto.InstructionWriteMetadata, 3));
};


/**
 * @param {?proto.proto.InstructionWriteMetadata|undefined} value
 * @return {!proto.proto.Instruction} returns this
*/
proto.proto.Instruction.prototype.setWriteMetadata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.proto.Instruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Instruction} returns this
 */
proto.proto.Instruction.prototype.clearWriteMetadata = function() {
  return this.setWriteMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Instruction.prototype.hasWriteMetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional InstructionActions actions = 4;
 * @return {?proto.proto.InstructionActions}
 */
proto.proto.Instruction.prototype.getActions = function() {
  return /** @type{?proto.proto.InstructionActions} */ (
    jspb.Message.getWrapperField(this, proto.proto.InstructionActions, 4));
};


/**
 * @param {?proto.proto.InstructionActions|undefined} value
 * @return {!proto.proto.Instruction} returns this
*/
proto.proto.Instruction.prototype.setActions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.proto.Instruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Instruction} returns this
 */
proto.proto.Instruction.prototype.clearActions = function() {
  return this.setActions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Instruction.prototype.hasActions = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional InstructionMeter meter = 5;
 * @return {?proto.proto.InstructionMeter}
 */
proto.proto.Instruction.prototype.getMeter = function() {
  return /** @type{?proto.proto.InstructionMeter} */ (
    jspb.Message.getWrapperField(this, proto.proto.InstructionMeter, 5));
};


/**
 * @param {?proto.proto.InstructionMeter|undefined} value
 * @return {!proto.proto.Instruction} returns this
*/
proto.proto.Instruction.prototype.setMeter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.proto.Instruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Instruction} returns this
 */
proto.proto.Instruction.prototype.clearMeter = function() {
  return this.setMeter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Instruction.prototype.hasMeter = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.InstructionGotoTable.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.InstructionGotoTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.InstructionGotoTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InstructionGotoTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.InstructionGotoTable}
 */
proto.proto.InstructionGotoTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.InstructionGotoTable;
  return proto.proto.InstructionGotoTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.InstructionGotoTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.InstructionGotoTable}
 */
proto.proto.InstructionGotoTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTableId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.InstructionGotoTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.InstructionGotoTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.InstructionGotoTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InstructionGotoTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 table_id = 1;
 * @return {number}
 */
proto.proto.InstructionGotoTable.prototype.getTableId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.InstructionGotoTable} returns this
 */
proto.proto.InstructionGotoTable.prototype.setTableId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.InstructionWriteMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.InstructionWriteMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.InstructionWriteMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InstructionWriteMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: jspb.Message.getFieldWithDefault(msg, 1, 0),
    metadataMask: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.InstructionWriteMetadata}
 */
proto.proto.InstructionWriteMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.InstructionWriteMetadata;
  return proto.proto.InstructionWriteMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.InstructionWriteMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.InstructionWriteMetadata}
 */
proto.proto.InstructionWriteMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMetadataMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.InstructionWriteMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.InstructionWriteMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.InstructionWriteMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InstructionWriteMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMetadataMask();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 metadata = 1;
 * @return {number}
 */
proto.proto.InstructionWriteMetadata.prototype.getMetadata = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.InstructionWriteMetadata} returns this
 */
proto.proto.InstructionWriteMetadata.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 metadata_mask = 2;
 * @return {number}
 */
proto.proto.InstructionWriteMetadata.prototype.getMetadataMask = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.InstructionWriteMetadata} returns this
 */
proto.proto.InstructionWriteMetadata.prototype.setMetadataMask = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.InstructionActions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.InstructionActions.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.InstructionActions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.InstructionActions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InstructionActions.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.proto.Action.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.InstructionActions}
 */
proto.proto.InstructionActions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.InstructionActions;
  return proto.proto.InstructionActions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.InstructionActions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.InstructionActions}
 */
proto.proto.InstructionActions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Action;
      reader.readMessage(value,proto.proto.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.InstructionActions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.InstructionActions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.InstructionActions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InstructionActions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Action.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Action actions = 1;
 * @return {!Array<!proto.proto.Action>}
 */
proto.proto.InstructionActions.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.proto.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Action, 1));
};


/**
 * @param {!Array<!proto.proto.Action>} value
 * @return {!proto.proto.InstructionActions} returns this
*/
proto.proto.InstructionActions.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Action}
 */
proto.proto.InstructionActions.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Action, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.InstructionActions} returns this
 */
proto.proto.InstructionActions.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.InstructionMeter.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.InstructionMeter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.InstructionMeter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InstructionMeter.toObject = function(includeInstance, msg) {
  var f, obj = {
    meterId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.InstructionMeter}
 */
proto.proto.InstructionMeter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.InstructionMeter;
  return proto.proto.InstructionMeter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.InstructionMeter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.InstructionMeter}
 */
proto.proto.InstructionMeter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMeterId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.InstructionMeter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.InstructionMeter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.InstructionMeter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.InstructionMeter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeterId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 meter_id = 1;
 * @return {number}
 */
proto.proto.InstructionMeter.prototype.getMeterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.InstructionMeter} returns this
 */
proto.proto.InstructionMeter.prototype.setMeterId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Match.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Match.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Match} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Match.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mask: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Match}
 */
proto.proto.Match.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Match;
  return proto.proto.Match.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Match} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Match}
 */
proto.proto.Match.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Match.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Match.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Match} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Match.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.proto.Match.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Match} returns this
 */
proto.proto.Match.prototype.setFieldName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Match} returns this
 */
proto.proto.Match.prototype.clearFieldName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Match.prototype.hasFieldName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.proto.Match.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Match} returns this
 */
proto.proto.Match.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Match} returns this
 */
proto.proto.Match.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Match.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string mask = 3;
 * @return {string}
 */
proto.proto.Match.prototype.getMask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Match} returns this
 */
proto.proto.Match.prototype.setMask = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Match} returns this
 */
proto.proto.Match.prototype.clearMask = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Match.prototype.hasMask = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Flow.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Flow.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Flow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Flow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Flow.toObject = function(includeInstance, msg) {
  var f, obj = {
    cookie: jspb.Message.getFieldWithDefault(msg, 1, ""),
    duration: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    table: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nPackets: jspb.Message.getFieldWithDefault(msg, 4, 0),
    nBytes: jspb.Message.getFieldWithDefault(msg, 5, 0),
    priority: jspb.Message.getFieldWithDefault(msg, 6, 0),
    matchList: jspb.Message.toObjectList(msg.getMatchList(),
    proto.proto.Match.toObject, includeInstance),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.proto.Instruction.toObject, includeInstance),
    flowId: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Flow}
 */
proto.proto.Flow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Flow;
  return proto.proto.Flow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Flow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Flow}
 */
proto.proto.Flow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCookie(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDuration(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTable(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setNPackets(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setNBytes(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPriority(value);
      break;
    case 7:
      var value = new proto.proto.Match;
      reader.readMessage(value,proto.proto.Match.deserializeBinaryFromReader);
      msg.addMatch(value);
      break;
    case 8:
      var value = new proto.proto.Instruction;
      reader.readMessage(value,proto.proto.Instruction.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setFlowId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Flow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Flow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Flow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Flow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = message.getMatchList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.proto.Match.serializeBinaryToWriter
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.proto.Instruction.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeSint32(
      9,
      f
    );
  }
};


/**
 * optional string cookie = 1;
 * @return {string}
 */
proto.proto.Flow.prototype.getCookie = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.setCookie = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.clearCookie = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Flow.prototype.hasCookie = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float duration = 2;
 * @return {number}
 */
proto.proto.Flow.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.setDuration = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.clearDuration = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Flow.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint32 table = 3;
 * @return {number}
 */
proto.proto.Flow.prototype.getTable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.setTable = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.clearTable = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Flow.prototype.hasTable = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sint32 n_packets = 4;
 * @return {number}
 */
proto.proto.Flow.prototype.getNPackets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.setNPackets = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.clearNPackets = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Flow.prototype.hasNPackets = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional sint32 n_bytes = 5;
 * @return {number}
 */
proto.proto.Flow.prototype.getNBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.setNBytes = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.clearNBytes = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Flow.prototype.hasNBytes = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint32 priority = 6;
 * @return {number}
 */
proto.proto.Flow.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.setPriority = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.clearPriority = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Flow.prototype.hasPriority = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Match match = 7;
 * @return {!Array<!proto.proto.Match>}
 */
proto.proto.Flow.prototype.getMatchList = function() {
  return /** @type{!Array<!proto.proto.Match>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Match, 7));
};


/**
 * @param {!Array<!proto.proto.Match>} value
 * @return {!proto.proto.Flow} returns this
*/
proto.proto.Flow.prototype.setMatchList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.proto.Match=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Match}
 */
proto.proto.Flow.prototype.addMatch = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.proto.Match, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.clearMatchList = function() {
  return this.setMatchList([]);
};


/**
 * repeated Instruction actions = 8;
 * @return {!Array<!proto.proto.Instruction>}
 */
proto.proto.Flow.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.proto.Instruction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Instruction, 8));
};


/**
 * @param {!Array<!proto.proto.Instruction>} value
 * @return {!proto.proto.Flow} returns this
*/
proto.proto.Flow.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.proto.Instruction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Instruction}
 */
proto.proto.Flow.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.proto.Instruction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};


/**
 * optional sint32 flow_id = 9;
 * @return {number}
 */
proto.proto.Flow.prototype.getFlowId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.setFlowId = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Flow} returns this
 */
proto.proto.Flow.prototype.clearFlowId = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Flow.prototype.hasFlowId = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.FlowTable.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FlowTable.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FlowTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FlowTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FlowTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    flowsList: jspb.Message.toObjectList(msg.getFlowsList(),
    proto.proto.Flow.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FlowTable}
 */
proto.proto.FlowTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FlowTable;
  return proto.proto.FlowTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FlowTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FlowTable}
 */
proto.proto.FlowTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Flow;
      reader.readMessage(value,proto.proto.Flow.deserializeBinaryFromReader);
      msg.addFlows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FlowTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FlowTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FlowTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FlowTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Flow.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Flow flows = 1;
 * @return {!Array<!proto.proto.Flow>}
 */
proto.proto.FlowTable.prototype.getFlowsList = function() {
  return /** @type{!Array<!proto.proto.Flow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Flow, 1));
};


/**
 * @param {!Array<!proto.proto.Flow>} value
 * @return {!proto.proto.FlowTable} returns this
*/
proto.proto.FlowTable.prototype.setFlowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Flow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Flow}
 */
proto.proto.FlowTable.prototype.addFlows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Flow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.FlowTable} returns this
 */
proto.proto.FlowTable.prototype.clearFlowsList = function() {
  return this.setFlowsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.PacketProcessing.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PacketProcessing.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PacketProcessing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PacketProcessing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PacketProcessing.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_switch: jspb.Message.getFieldWithDefault(msg, 1, ""),
    flowTable: (f = msg.getFlowTable()) && proto.proto.FlowTable.toObject(includeInstance, f),
    actionSet: (f = msg.getActionSet()) && proto.proto.ActionSet.toObject(includeInstance, f),
    pktsList: jspb.Message.toObjectList(msg.getPktsList(),
    proto.proto.Packet.toObject, includeInstance),
    matchedFlowsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    packetAfterActionSet: (f = msg.getPacketAfterActionSet()) && proto.proto.Packet.toObject(includeInstance, f),
    outsMap: (f = msg.getOutsMap()) ? f.toObject(includeInstance, proto.proto.Packet.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PacketProcessing}
 */
proto.proto.PacketProcessing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PacketProcessing;
  return proto.proto.PacketProcessing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PacketProcessing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PacketProcessing}
 */
proto.proto.PacketProcessing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSwitch(value);
      break;
    case 4:
      var value = new proto.proto.FlowTable;
      reader.readMessage(value,proto.proto.FlowTable.deserializeBinaryFromReader);
      msg.setFlowTable(value);
      break;
    case 5:
      var value = new proto.proto.ActionSet;
      reader.readMessage(value,proto.proto.ActionSet.deserializeBinaryFromReader);
      msg.setActionSet(value);
      break;
    case 2:
      var value = new proto.proto.Packet;
      reader.readMessage(value,proto.proto.Packet.deserializeBinaryFromReader);
      msg.addPkts(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedSint32() : [reader.readSint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMatchedFlows(values[i]);
      }
      break;
    case 6:
      var value = new proto.proto.Packet;
      reader.readMessage(value,proto.proto.Packet.deserializeBinaryFromReader);
      msg.setPacketAfterActionSet(value);
      break;
    case 7:
      var value = msg.getOutsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.Packet.deserializeBinaryFromReader, "", new proto.proto.Packet());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PacketProcessing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PacketProcessing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PacketProcessing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PacketProcessing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFlowTable();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.FlowTable.serializeBinaryToWriter
    );
  }
  f = message.getActionSet();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.ActionSet.serializeBinaryToWriter
    );
  }
  f = message.getPktsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.Packet.serializeBinaryToWriter
    );
  }
  f = message.getMatchedFlowsList();
  if (f.length > 0) {
    writer.writePackedSint32(
      3,
      f
    );
  }
  f = message.getPacketAfterActionSet();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.Packet.serializeBinaryToWriter
    );
  }
  f = message.getOutsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.Packet.serializeBinaryToWriter);
  }
};


/**
 * optional string switch = 1;
 * @return {string}
 */
proto.proto.PacketProcessing.prototype.getSwitch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.PacketProcessing} returns this
 */
proto.proto.PacketProcessing.prototype.setSwitch = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.PacketProcessing} returns this
 */
proto.proto.PacketProcessing.prototype.clearSwitch = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketProcessing.prototype.hasSwitch = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FlowTable flow_table = 4;
 * @return {?proto.proto.FlowTable}
 */
proto.proto.PacketProcessing.prototype.getFlowTable = function() {
  return /** @type{?proto.proto.FlowTable} */ (
    jspb.Message.getWrapperField(this, proto.proto.FlowTable, 4));
};


/**
 * @param {?proto.proto.FlowTable|undefined} value
 * @return {!proto.proto.PacketProcessing} returns this
*/
proto.proto.PacketProcessing.prototype.setFlowTable = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.PacketProcessing} returns this
 */
proto.proto.PacketProcessing.prototype.clearFlowTable = function() {
  return this.setFlowTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketProcessing.prototype.hasFlowTable = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ActionSet action_set = 5;
 * @return {?proto.proto.ActionSet}
 */
proto.proto.PacketProcessing.prototype.getActionSet = function() {
  return /** @type{?proto.proto.ActionSet} */ (
    jspb.Message.getWrapperField(this, proto.proto.ActionSet, 5));
};


/**
 * @param {?proto.proto.ActionSet|undefined} value
 * @return {!proto.proto.PacketProcessing} returns this
*/
proto.proto.PacketProcessing.prototype.setActionSet = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.PacketProcessing} returns this
 */
proto.proto.PacketProcessing.prototype.clearActionSet = function() {
  return this.setActionSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketProcessing.prototype.hasActionSet = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Packet pkts = 2;
 * @return {!Array<!proto.proto.Packet>}
 */
proto.proto.PacketProcessing.prototype.getPktsList = function() {
  return /** @type{!Array<!proto.proto.Packet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Packet, 2));
};


/**
 * @param {!Array<!proto.proto.Packet>} value
 * @return {!proto.proto.PacketProcessing} returns this
*/
proto.proto.PacketProcessing.prototype.setPktsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.Packet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Packet}
 */
proto.proto.PacketProcessing.prototype.addPkts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.Packet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.PacketProcessing} returns this
 */
proto.proto.PacketProcessing.prototype.clearPktsList = function() {
  return this.setPktsList([]);
};


/**
 * repeated sint32 matched_flows = 3;
 * @return {!Array<number>}
 */
proto.proto.PacketProcessing.prototype.getMatchedFlowsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.proto.PacketProcessing} returns this
 */
proto.proto.PacketProcessing.prototype.setMatchedFlowsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.proto.PacketProcessing} returns this
 */
proto.proto.PacketProcessing.prototype.addMatchedFlows = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.PacketProcessing} returns this
 */
proto.proto.PacketProcessing.prototype.clearMatchedFlowsList = function() {
  return this.setMatchedFlowsList([]);
};


/**
 * optional Packet packet_after_action_set = 6;
 * @return {?proto.proto.Packet}
 */
proto.proto.PacketProcessing.prototype.getPacketAfterActionSet = function() {
  return /** @type{?proto.proto.Packet} */ (
    jspb.Message.getWrapperField(this, proto.proto.Packet, 6));
};


/**
 * @param {?proto.proto.Packet|undefined} value
 * @return {!proto.proto.PacketProcessing} returns this
*/
proto.proto.PacketProcessing.prototype.setPacketAfterActionSet = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.PacketProcessing} returns this
 */
proto.proto.PacketProcessing.prototype.clearPacketAfterActionSet = function() {
  return this.setPacketAfterActionSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketProcessing.prototype.hasPacketAfterActionSet = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * map<string, Packet> outs = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.Packet>}
 */
proto.proto.PacketProcessing.prototype.getOutsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.Packet>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.proto.Packet));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.PacketProcessing} returns this
 */
proto.proto.PacketProcessing.prototype.clearOutsMap = function() {
  this.getOutsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PacketArc.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PacketArc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PacketArc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PacketArc.toObject = function(includeInstance, msg) {
  var f, obj = {
    src: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pkt: (f = msg.getPkt()) && proto.proto.Packet.toObject(includeInstance, f),
    packetProcessing: (f = msg.getPacketProcessing()) && proto.proto.PacketProcessing.toObject(includeInstance, f),
    edge: jspb.Message.getFieldWithDefault(msg, 5, ""),
    dst: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dstInterface: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PacketArc}
 */
proto.proto.PacketArc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PacketArc;
  return proto.proto.PacketArc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PacketArc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PacketArc}
 */
proto.proto.PacketArc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrc(value);
      break;
    case 2:
      var value = new proto.proto.Packet;
      reader.readMessage(value,proto.proto.Packet.deserializeBinaryFromReader);
      msg.setPkt(value);
      break;
    case 4:
      var value = new proto.proto.PacketProcessing;
      reader.readMessage(value,proto.proto.PacketProcessing.deserializeBinaryFromReader);
      msg.setPacketProcessing(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEdge(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDst(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDstInterface(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PacketArc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PacketArc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PacketArc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PacketArc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPkt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Packet.serializeBinaryToWriter
    );
  }
  f = message.getPacketProcessing();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.PacketProcessing.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string src = 1;
 * @return {string}
 */
proto.proto.PacketArc.prototype.getSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.setSrc = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.clearSrc = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketArc.prototype.hasSrc = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Packet pkt = 2;
 * @return {?proto.proto.Packet}
 */
proto.proto.PacketArc.prototype.getPkt = function() {
  return /** @type{?proto.proto.Packet} */ (
    jspb.Message.getWrapperField(this, proto.proto.Packet, 2));
};


/**
 * @param {?proto.proto.Packet|undefined} value
 * @return {!proto.proto.PacketArc} returns this
*/
proto.proto.PacketArc.prototype.setPkt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.clearPkt = function() {
  return this.setPkt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketArc.prototype.hasPkt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PacketProcessing packet_processing = 4;
 * @return {?proto.proto.PacketProcessing}
 */
proto.proto.PacketArc.prototype.getPacketProcessing = function() {
  return /** @type{?proto.proto.PacketProcessing} */ (
    jspb.Message.getWrapperField(this, proto.proto.PacketProcessing, 4));
};


/**
 * @param {?proto.proto.PacketProcessing|undefined} value
 * @return {!proto.proto.PacketArc} returns this
*/
proto.proto.PacketArc.prototype.setPacketProcessing = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.clearPacketProcessing = function() {
  return this.setPacketProcessing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketArc.prototype.hasPacketProcessing = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string edge = 5;
 * @return {string}
 */
proto.proto.PacketArc.prototype.getEdge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.setEdge = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.clearEdge = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketArc.prototype.hasEdge = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string dst = 3;
 * @return {string}
 */
proto.proto.PacketArc.prototype.getDst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.setDst = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.clearDst = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketArc.prototype.hasDst = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string dst_interface = 6;
 * @return {string}
 */
proto.proto.PacketArc.prototype.getDstInterface = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.setDstInterface = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.PacketArc} returns this
 */
proto.proto.PacketArc.prototype.clearDstInterface = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketArc.prototype.hasDstInterface = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.PacketTrace.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PacketTrace.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PacketTrace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PacketTrace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PacketTrace.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    arcsList: jspb.Message.toObjectList(msg.getArcsList(),
    proto.proto.PacketArc.toObject, includeInstance),
    protocol: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PacketTrace}
 */
proto.proto.PacketTrace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PacketTrace;
  return proto.proto.PacketTrace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PacketTrace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PacketTrace}
 */
proto.proto.PacketTrace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTimestamp(value);
      break;
    case 1:
      var value = new proto.proto.PacketArc;
      reader.readMessage(value,proto.proto.PacketArc.deserializeBinaryFromReader);
      msg.addArcs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PacketTrace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PacketTrace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PacketTrace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PacketTrace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getArcsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.PacketArc.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional float timestamp = 3;
 * @return {number}
 */
proto.proto.PacketTrace.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.PacketTrace} returns this
 */
proto.proto.PacketTrace.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * repeated PacketArc arcs = 1;
 * @return {!Array<!proto.proto.PacketArc>}
 */
proto.proto.PacketTrace.prototype.getArcsList = function() {
  return /** @type{!Array<!proto.proto.PacketArc>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.PacketArc, 1));
};


/**
 * @param {!Array<!proto.proto.PacketArc>} value
 * @return {!proto.proto.PacketTrace} returns this
*/
proto.proto.PacketTrace.prototype.setArcsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.PacketArc=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.PacketArc}
 */
proto.proto.PacketTrace.prototype.addArcs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.PacketArc, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.PacketTrace} returns this
 */
proto.proto.PacketTrace.prototype.clearArcsList = function() {
  return this.setArcsList([]);
};


/**
 * optional string protocol = 2;
 * @return {string}
 */
proto.proto.PacketTrace.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.PacketTrace} returns this
 */
proto.proto.PacketTrace.prototype.setProtocol = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.PacketTrace} returns this
 */
proto.proto.PacketTrace.prototype.clearProtocol = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PacketTrace.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ChangeTopologyRequest.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ChangeTopologyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ChangeTopologyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ChangeTopologyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChangeTopologyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    switchesList: jspb.Message.toObjectList(msg.getSwitchesList(),
    proto.proto.Switch.toObject, includeInstance),
    hostsList: jspb.Message.toObjectList(msg.getHostsList(),
    proto.proto.Host.toObject, includeInstance),
    linksList: jspb.Message.toObjectList(msg.getLinksList(),
    proto.proto.Link.toObject, includeInstance),
    controller: (f = msg.getController()) && proto.proto.RemoteController.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ChangeTopologyRequest}
 */
proto.proto.ChangeTopologyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ChangeTopologyRequest;
  return proto.proto.ChangeTopologyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ChangeTopologyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ChangeTopologyRequest}
 */
proto.proto.ChangeTopologyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Switch;
      reader.readMessage(value,proto.proto.Switch.deserializeBinaryFromReader);
      msg.addSwitches(value);
      break;
    case 2:
      var value = new proto.proto.Host;
      reader.readMessage(value,proto.proto.Host.deserializeBinaryFromReader);
      msg.addHosts(value);
      break;
    case 3:
      var value = new proto.proto.Link;
      reader.readMessage(value,proto.proto.Link.deserializeBinaryFromReader);
      msg.addLinks(value);
      break;
    case 4:
      var value = new proto.proto.RemoteController;
      reader.readMessage(value,proto.proto.RemoteController.deserializeBinaryFromReader);
      msg.setController(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ChangeTopologyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ChangeTopologyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ChangeTopologyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChangeTopologyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSwitchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Switch.serializeBinaryToWriter
    );
  }
  f = message.getHostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.Host.serializeBinaryToWriter
    );
  }
  f = message.getLinksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.Link.serializeBinaryToWriter
    );
  }
  f = message.getController();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.RemoteController.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Switch switches = 1;
 * @return {!Array<!proto.proto.Switch>}
 */
proto.proto.ChangeTopologyRequest.prototype.getSwitchesList = function() {
  return /** @type{!Array<!proto.proto.Switch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Switch, 1));
};


/**
 * @param {!Array<!proto.proto.Switch>} value
 * @return {!proto.proto.ChangeTopologyRequest} returns this
*/
proto.proto.ChangeTopologyRequest.prototype.setSwitchesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Switch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Switch}
 */
proto.proto.ChangeTopologyRequest.prototype.addSwitches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Switch, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.ChangeTopologyRequest} returns this
 */
proto.proto.ChangeTopologyRequest.prototype.clearSwitchesList = function() {
  return this.setSwitchesList([]);
};


/**
 * repeated Host hosts = 2;
 * @return {!Array<!proto.proto.Host>}
 */
proto.proto.ChangeTopologyRequest.prototype.getHostsList = function() {
  return /** @type{!Array<!proto.proto.Host>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Host, 2));
};


/**
 * @param {!Array<!proto.proto.Host>} value
 * @return {!proto.proto.ChangeTopologyRequest} returns this
*/
proto.proto.ChangeTopologyRequest.prototype.setHostsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.Host=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Host}
 */
proto.proto.ChangeTopologyRequest.prototype.addHosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.Host, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.ChangeTopologyRequest} returns this
 */
proto.proto.ChangeTopologyRequest.prototype.clearHostsList = function() {
  return this.setHostsList([]);
};


/**
 * repeated Link links = 3;
 * @return {!Array<!proto.proto.Link>}
 */
proto.proto.ChangeTopologyRequest.prototype.getLinksList = function() {
  return /** @type{!Array<!proto.proto.Link>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Link, 3));
};


/**
 * @param {!Array<!proto.proto.Link>} value
 * @return {!proto.proto.ChangeTopologyRequest} returns this
*/
proto.proto.ChangeTopologyRequest.prototype.setLinksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.Link=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Link}
 */
proto.proto.ChangeTopologyRequest.prototype.addLinks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.Link, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.ChangeTopologyRequest} returns this
 */
proto.proto.ChangeTopologyRequest.prototype.clearLinksList = function() {
  return this.setLinksList([]);
};


/**
 * optional RemoteController controller = 4;
 * @return {?proto.proto.RemoteController}
 */
proto.proto.ChangeTopologyRequest.prototype.getController = function() {
  return /** @type{?proto.proto.RemoteController} */ (
    jspb.Message.getWrapperField(this, proto.proto.RemoteController, 4));
};


/**
 * @param {?proto.proto.RemoteController|undefined} value
 * @return {!proto.proto.ChangeTopologyRequest} returns this
*/
proto.proto.ChangeTopologyRequest.prototype.setController = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ChangeTopologyRequest} returns this
 */
proto.proto.ChangeTopologyRequest.prototype.clearController = function() {
  return this.setController(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ChangeTopologyRequest.prototype.hasController = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.GetFeaturesRequest.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetFeaturesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetFeaturesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetFeaturesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetFeaturesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    switchesList: jspb.Message.toObjectList(msg.getSwitchesList(),
    proto.proto.Switch.toObject, includeInstance),
    hostsList: jspb.Message.toObjectList(msg.getHostsList(),
    proto.proto.Host.toObject, includeInstance),
    linksList: jspb.Message.toObjectList(msg.getLinksList(),
    proto.proto.Link.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetFeaturesRequest}
 */
proto.proto.GetFeaturesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetFeaturesRequest;
  return proto.proto.GetFeaturesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetFeaturesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetFeaturesRequest}
 */
proto.proto.GetFeaturesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Switch;
      reader.readMessage(value,proto.proto.Switch.deserializeBinaryFromReader);
      msg.addSwitches(value);
      break;
    case 2:
      var value = new proto.proto.Host;
      reader.readMessage(value,proto.proto.Host.deserializeBinaryFromReader);
      msg.addHosts(value);
      break;
    case 3:
      var value = new proto.proto.Link;
      reader.readMessage(value,proto.proto.Link.deserializeBinaryFromReader);
      msg.addLinks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetFeaturesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GetFeaturesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetFeaturesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetFeaturesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSwitchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Switch.serializeBinaryToWriter
    );
  }
  f = message.getHostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.Host.serializeBinaryToWriter
    );
  }
  f = message.getLinksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.Link.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Switch switches = 1;
 * @return {!Array<!proto.proto.Switch>}
 */
proto.proto.GetFeaturesRequest.prototype.getSwitchesList = function() {
  return /** @type{!Array<!proto.proto.Switch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Switch, 1));
};


/**
 * @param {!Array<!proto.proto.Switch>} value
 * @return {!proto.proto.GetFeaturesRequest} returns this
*/
proto.proto.GetFeaturesRequest.prototype.setSwitchesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Switch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Switch}
 */
proto.proto.GetFeaturesRequest.prototype.addSwitches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Switch, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.GetFeaturesRequest} returns this
 */
proto.proto.GetFeaturesRequest.prototype.clearSwitchesList = function() {
  return this.setSwitchesList([]);
};


/**
 * repeated Host hosts = 2;
 * @return {!Array<!proto.proto.Host>}
 */
proto.proto.GetFeaturesRequest.prototype.getHostsList = function() {
  return /** @type{!Array<!proto.proto.Host>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Host, 2));
};


/**
 * @param {!Array<!proto.proto.Host>} value
 * @return {!proto.proto.GetFeaturesRequest} returns this
*/
proto.proto.GetFeaturesRequest.prototype.setHostsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.Host=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Host}
 */
proto.proto.GetFeaturesRequest.prototype.addHosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.Host, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.GetFeaturesRequest} returns this
 */
proto.proto.GetFeaturesRequest.prototype.clearHostsList = function() {
  return this.setHostsList([]);
};


/**
 * repeated Link links = 3;
 * @return {!Array<!proto.proto.Link>}
 */
proto.proto.GetFeaturesRequest.prototype.getLinksList = function() {
  return /** @type{!Array<!proto.proto.Link>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Link, 3));
};


/**
 * @param {!Array<!proto.proto.Link>} value
 * @return {!proto.proto.GetFeaturesRequest} returns this
*/
proto.proto.GetFeaturesRequest.prototype.setLinksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.Link=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Link}
 */
proto.proto.GetFeaturesRequest.prototype.addLinks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.Link, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.GetFeaturesRequest} returns this
 */
proto.proto.GetFeaturesRequest.prototype.clearLinksList = function() {
  return this.setLinksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.StartNetworkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.StartNetworkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.StartNetworkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StartNetworkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    option: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.StartNetworkRequest}
 */
proto.proto.StartNetworkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.StartNetworkRequest;
  return proto.proto.StartNetworkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.StartNetworkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.StartNetworkRequest}
 */
proto.proto.StartNetworkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.StartNetworkOption} */ (reader.readEnum());
      msg.setOption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.StartNetworkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.StartNetworkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.StartNetworkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StartNetworkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOption();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional StartNetworkOption option = 1;
 * @return {!proto.proto.StartNetworkOption}
 */
proto.proto.StartNetworkRequest.prototype.getOption = function() {
  return /** @type {!proto.proto.StartNetworkOption} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.StartNetworkOption} value
 * @return {!proto.proto.StartNetworkRequest} returns this
 */
proto.proto.StartNetworkRequest.prototype.setOption = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.StartTracingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.StartTracingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.StartTracingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StartTracingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    option: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.StartTracingRequest}
 */
proto.proto.StartTracingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.StartTracingRequest;
  return proto.proto.StartTracingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.StartTracingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.StartTracingRequest}
 */
proto.proto.StartTracingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setOption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.StartTracingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.StartTracingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.StartTracingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StartTracingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
};


/**
 * optional sint32 option = 1;
 * @return {number}
 */
proto.proto.StartTracingRequest.prototype.getOption = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.StartTracingRequest} returns this
 */
proto.proto.StartTracingRequest.prototype.setOption = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.StartTracingRequest} returns this
 */
proto.proto.StartTracingRequest.prototype.clearOption = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.StartTracingRequest.prototype.hasOption = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.StopTracingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.StopTracingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.StopTracingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StopTracingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    option: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.StopTracingRequest}
 */
proto.proto.StopTracingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.StopTracingRequest;
  return proto.proto.StopTracingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.StopTracingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.StopTracingRequest}
 */
proto.proto.StopTracingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setOption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.StopTracingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.StopTracingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.StopTracingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StopTracingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
};


/**
 * optional sint32 option = 1;
 * @return {number}
 */
proto.proto.StopTracingRequest.prototype.getOption = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.StopTracingRequest} returns this
 */
proto.proto.StopTracingRequest.prototype.setOption = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.StopTracingRequest} returns this
 */
proto.proto.StopTracingRequest.prototype.clearOption = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.StopTracingRequest.prototype.hasOption = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetTraceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetTraceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetTraceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetTraceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    option: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetTraceRequest}
 */
proto.proto.GetTraceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetTraceRequest;
  return proto.proto.GetTraceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetTraceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetTraceRequest}
 */
proto.proto.GetTraceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setOption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetTraceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GetTraceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetTraceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetTraceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
};


/**
 * optional sint32 option = 1;
 * @return {number}
 */
proto.proto.GetTraceRequest.prototype.getOption = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.GetTraceRequest} returns this
 */
proto.proto.GetTraceRequest.prototype.setOption = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.GetTraceRequest} returns this
 */
proto.proto.GetTraceRequest.prototype.clearOption = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.GetTraceRequest.prototype.hasOption = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.GetTraceResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetTraceResult.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetTraceResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetTraceResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetTraceResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    tracesLength: jspb.Message.getFieldWithDefault(msg, 2, 0),
    packetTracesList: jspb.Message.toObjectList(msg.getPacketTracesList(),
    proto.proto.PacketTrace.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetTraceResult}
 */
proto.proto.GetTraceResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetTraceResult;
  return proto.proto.GetTraceResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetTraceResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetTraceResult}
 */
proto.proto.GetTraceResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTracesLength(value);
      break;
    case 1:
      var value = new proto.proto.PacketTrace;
      reader.readMessage(value,proto.proto.PacketTrace.deserializeBinaryFromReader);
      msg.addPacketTraces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetTraceResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GetTraceResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetTraceResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetTraceResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPacketTracesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.PacketTrace.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 traces_length = 2;
 * @return {number}
 */
proto.proto.GetTraceResult.prototype.getTracesLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.GetTraceResult} returns this
 */
proto.proto.GetTraceResult.prototype.setTracesLength = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.GetTraceResult} returns this
 */
proto.proto.GetTraceResult.prototype.clearTracesLength = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.GetTraceResult.prototype.hasTracesLength = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated PacketTrace packet_traces = 1;
 * @return {!Array<!proto.proto.PacketTrace>}
 */
proto.proto.GetTraceResult.prototype.getPacketTracesList = function() {
  return /** @type{!Array<!proto.proto.PacketTrace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.PacketTrace, 1));
};


/**
 * @param {!Array<!proto.proto.PacketTrace>} value
 * @return {!proto.proto.GetTraceResult} returns this
*/
proto.proto.GetTraceResult.prototype.setPacketTracesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.PacketTrace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.PacketTrace}
 */
proto.proto.GetTraceResult.prototype.addPacketTraces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.PacketTrace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.GetTraceResult} returns this
 */
proto.proto.GetTraceResult.prototype.clearPacketTracesList = function() {
  return this.setPacketTracesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TopoChangeResult.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TopoChangeResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TopoChangeResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TopoChangeResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TopoChangeResult}
 */
proto.proto.TopoChangeResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TopoChangeResult;
  return proto.proto.TopoChangeResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TopoChangeResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TopoChangeResult}
 */
proto.proto.TopoChangeResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TopoChangeResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TopoChangeResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TopoChangeResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TopoChangeResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
};


/**
 * optional sint32 status = 1;
 * @return {number}
 */
proto.proto.TopoChangeResult.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.TopoChangeResult} returns this
 */
proto.proto.TopoChangeResult.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.TopoChangeResult} returns this
 */
proto.proto.TopoChangeResult.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TopoChangeResult.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.HostCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.HostCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.HostCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.HostCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    command: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.HostCommand}
 */
proto.proto.HostCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.HostCommand;
  return proto.proto.HostCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.HostCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.HostCommand}
 */
proto.proto.HostCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    case 3:
      var value = /** @type {!proto.proto.CommandResultType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.HostCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.HostCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.HostCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.HostCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.proto.CommandResultType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.proto.HostCommand.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.HostCommand} returns this
 */
proto.proto.HostCommand.prototype.setHost = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.HostCommand} returns this
 */
proto.proto.HostCommand.prototype.clearHost = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.HostCommand.prototype.hasHost = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string command = 2;
 * @return {string}
 */
proto.proto.HostCommand.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.HostCommand} returns this
 */
proto.proto.HostCommand.prototype.setCommand = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.HostCommand} returns this
 */
proto.proto.HostCommand.prototype.clearCommand = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.HostCommand.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CommandResultType type = 3;
 * @return {!proto.proto.CommandResultType}
 */
proto.proto.HostCommand.prototype.getType = function() {
  return /** @type {!proto.proto.CommandResultType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.proto.CommandResultType} value
 * @return {!proto.proto.HostCommand} returns this
 */
proto.proto.HostCommand.prototype.setType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.HostCommand} returns this
 */
proto.proto.HostCommand.prototype.clearType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.HostCommand.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.MininetCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.MininetCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.MininetCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.MininetCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.MininetCommand}
 */
proto.proto.MininetCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.MininetCommand;
  return proto.proto.MininetCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.MininetCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.MininetCommand}
 */
proto.proto.MininetCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {!proto.proto.CommandType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.MininetCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.MininetCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.MininetCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.MininetCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.proto.CommandType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string command = 1;
 * @return {string}
 */
proto.proto.MininetCommand.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.MininetCommand} returns this
 */
proto.proto.MininetCommand.prototype.setCommand = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.MininetCommand} returns this
 */
proto.proto.MininetCommand.prototype.clearCommand = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.MininetCommand.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CommandType type = 2;
 * @return {!proto.proto.CommandType}
 */
proto.proto.MininetCommand.prototype.getType = function() {
  return /** @type {!proto.proto.CommandType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.proto.CommandType} value
 * @return {!proto.proto.MininetCommand} returns this
 */
proto.proto.MininetCommand.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.MininetCommand} returns this
 */
proto.proto.MininetCommand.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.MininetCommand.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CommandResult.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CommandResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CommandResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CommandResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CommandResult}
 */
proto.proto.CommandResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CommandResult;
  return proto.proto.CommandResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CommandResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CommandResult}
 */
proto.proto.CommandResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.CommandResultType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CommandResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CommandResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CommandResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CommandResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.proto.CommandResultType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional CommandResultType type = 1;
 * @return {!proto.proto.CommandResultType}
 */
proto.proto.CommandResult.prototype.getType = function() {
  return /** @type {!proto.proto.CommandResultType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.CommandResultType} value
 * @return {!proto.proto.CommandResult} returns this
 */
proto.proto.CommandResult.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.CommandResult} returns this
 */
proto.proto.CommandResult.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CommandResult.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string result = 2;
 * @return {string}
 */
proto.proto.CommandResult.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.CommandResult} returns this
 */
proto.proto.CommandResult.prototype.setResult = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.CommandResult} returns this
 */
proto.proto.CommandResult.prototype.clearResult = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CommandResult.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.proto.InstructionType = {
  OFPIT_INVALID: 0,
  OFPIT_GOTO_TABLE: 1,
  OFPIT_WRITE_METADATA: 2,
  OFPIT_WRITE_ACTIONS: 3,
  OFPIT_APPLY_ACTIONS: 4,
  OFPIT_CLEAR_ACTIONS: 5,
  OFPIT_METER: 6,
  OFPIT_EXPERIMENTER: 65535
};

/**
 * @enum {number}
 */
proto.proto.StartNetworkOption = {
  NO_OPTION: 0
};

/**
 * @enum {number}
 */
proto.proto.CommandType = {
  NOMAL: 0,
  SIGINT: 1
};

/**
 * @enum {number}
 */
proto.proto.CommandResultType = {
  OUTPUT: 0,
  ERROR: 1,
  END_SIGNAL: 100
};

goog.object.extend(exports, proto.proto);
