/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: net.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
export namespace proto {
    export class Host extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            name?: string;
        }) | ({
            ip?: string;
        }) | ({
            mac?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1], [2], [3]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
                if ("mac" in data && data.mac != undefined) {
                    this.mac = data.mac;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 1, [1], value);
        }
        get ip() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set ip(value: string) {
            pb_1.Message.setOneofField(this, 2, [2], value);
        }
        get mac() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set mac(value: string) {
            pb_1.Message.setOneofField(this, 3, [3], value);
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                1: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _ip() {
            const cases: {
                [index: number]: "none" | "ip";
            } = {
                0: "none",
                2: "ip"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _mac() {
            const cases: {
                [index: number]: "none" | "mac";
            } = {
                0: "none",
                3: "mac"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        toObject() {
            const data: {
                name?: string;
                ip?: string;
                mac?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            if (this.mac != null) {
                data.mac = this.mac;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.ip === "string" && this.ip.length)
                writer.writeString(2, this.ip);
            if (typeof this.mac === "string" && this.mac.length)
                writer.writeString(3, this.mac);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Host {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Host();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.ip = reader.readString();
                        break;
                    case 3:
                        message.mac = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Host {
            return Host.deserialize(bytes);
        }
    }
    export class Switch extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            name?: string;
        }) | ({
            datapath_id?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1], [2]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("datapath_id" in data && data.datapath_id != undefined) {
                    this.datapath_id = data.datapath_id;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 1, [1], value);
        }
        get datapath_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set datapath_id(value: string) {
            pb_1.Message.setOneofField(this, 2, [2], value);
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                1: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _datapath_id() {
            const cases: {
                [index: number]: "none" | "datapath_id";
            } = {
                0: "none",
                2: "datapath_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        toObject() {
            const data: {
                name?: string;
                datapath_id?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.datapath_id != null) {
                data.datapath_id = this.datapath_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.datapath_id === "string" && this.datapath_id.length)
                writer.writeString(2, this.datapath_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Switch {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Switch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.datapath_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Switch {
            return Switch.deserialize(bytes);
        }
    }
    export class Link extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            name?: string;
        }) | ({
            host1?: string;
        }) | ({
            host2?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1], [2], [3]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("host1" in data && data.host1 != undefined) {
                    this.host1 = data.host1;
                }
                if ("host2" in data && data.host2 != undefined) {
                    this.host2 = data.host2;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 1, [1], value);
        }
        get host1() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set host1(value: string) {
            pb_1.Message.setOneofField(this, 2, [2], value);
        }
        get host2() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set host2(value: string) {
            pb_1.Message.setOneofField(this, 3, [3], value);
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                1: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _host1() {
            const cases: {
                [index: number]: "none" | "host1";
            } = {
                0: "none",
                2: "host1"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _host2() {
            const cases: {
                [index: number]: "none" | "host2";
            } = {
                0: "none",
                3: "host2"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        toObject() {
            const data: {
                name?: string;
                host1?: string;
                host2?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.host1 != null) {
                data.host1 = this.host1;
            }
            if (this.host2 != null) {
                data.host2 = this.host2;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.host1 === "string" && this.host1.length)
                writer.writeString(2, this.host1);
            if (typeof this.host2 === "string" && this.host2.length)
                writer.writeString(3, this.host2);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Link {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Link();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.host1 = reader.readString();
                        break;
                    case 3:
                        message.host2 = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Link {
            return Link.deserialize(bytes);
        }
    }
    export class Packet extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            eth_dst?: string;
        }) | ({
            eth_src?: string;
        }) | ({
            eth_type?: string;
        }) | ({
            vlan_vid?: string;
        }) | ({
            vlan_pcp?: string;
        }) | ({
            ip_dscp?: string;
        }) | ({
            ip_ecn?: string;
        }) | ({
            ip_proto?: string;
        }) | ({
            ipv4_src?: string;
        }) | ({
            ipv4_dst?: string;
        }) | ({
            tcp_src?: string;
        }) | ({
            tcp_dst?: string;
        }) | ({
            udp_src?: string;
        }) | ({
            udp_dst?: string;
        }) | ({
            sctp_src?: string;
        }) | ({
            sctp_dst?: string;
        }) | ({
            icmpv4_type?: string;
        }) | ({
            icmpv4_code?: string;
        }) | ({
            arp_op?: string;
        }) | ({
            arp_spa?: string;
        }) | ({
            arp_tpa?: string;
        }) | ({
            arp_sha?: string;
        }) | ({
            arp_tha?: string;
        }) | ({
            ipv6_src?: string;
        }) | ({
            ipv6_dst?: string;
        }) | ({
            ipv6_flabel?: string;
        }) | ({
            icmpv6_type?: string;
        }) | ({
            icmpv6_code?: string;
        }) | ({
            ipv6_nd_target?: string;
        }) | ({
            ipv6_nd_sll?: string;
        }) | ({
            ipv6_nd_tll?: string;
        }) | ({
            mpls_label?: string;
        }) | ({
            mpls_tc?: string;
        }) | ({
            mpls_bos?: string;
        }) | ({
            pbb_isid?: string;
        }) | ({
            tunnel_id?: string;
        }) | ({
            ipv6_exthdr?: string;
        }) | ({
            pbb_uca?: string;
        }) | ({
            tcp_flags?: string;
        }) | ({
            actset_output?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1], [3], [5], [7], [9], [11], [13], [15], [17], [19], [21], [23], [25], [27], [29], [31], [33], [35], [37], [39], [41], [43], [45], [47], [49], [51], [53], [55], [57], [59], [61], [63], [65], [67], [69], [71], [73], [75], [77], [101]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("eth_dst" in data && data.eth_dst != undefined) {
                    this.eth_dst = data.eth_dst;
                }
                if ("eth_src" in data && data.eth_src != undefined) {
                    this.eth_src = data.eth_src;
                }
                if ("eth_type" in data && data.eth_type != undefined) {
                    this.eth_type = data.eth_type;
                }
                if ("vlan_vid" in data && data.vlan_vid != undefined) {
                    this.vlan_vid = data.vlan_vid;
                }
                if ("vlan_pcp" in data && data.vlan_pcp != undefined) {
                    this.vlan_pcp = data.vlan_pcp;
                }
                if ("ip_dscp" in data && data.ip_dscp != undefined) {
                    this.ip_dscp = data.ip_dscp;
                }
                if ("ip_ecn" in data && data.ip_ecn != undefined) {
                    this.ip_ecn = data.ip_ecn;
                }
                if ("ip_proto" in data && data.ip_proto != undefined) {
                    this.ip_proto = data.ip_proto;
                }
                if ("ipv4_src" in data && data.ipv4_src != undefined) {
                    this.ipv4_src = data.ipv4_src;
                }
                if ("ipv4_dst" in data && data.ipv4_dst != undefined) {
                    this.ipv4_dst = data.ipv4_dst;
                }
                if ("tcp_src" in data && data.tcp_src != undefined) {
                    this.tcp_src = data.tcp_src;
                }
                if ("tcp_dst" in data && data.tcp_dst != undefined) {
                    this.tcp_dst = data.tcp_dst;
                }
                if ("udp_src" in data && data.udp_src != undefined) {
                    this.udp_src = data.udp_src;
                }
                if ("udp_dst" in data && data.udp_dst != undefined) {
                    this.udp_dst = data.udp_dst;
                }
                if ("sctp_src" in data && data.sctp_src != undefined) {
                    this.sctp_src = data.sctp_src;
                }
                if ("sctp_dst" in data && data.sctp_dst != undefined) {
                    this.sctp_dst = data.sctp_dst;
                }
                if ("icmpv4_type" in data && data.icmpv4_type != undefined) {
                    this.icmpv4_type = data.icmpv4_type;
                }
                if ("icmpv4_code" in data && data.icmpv4_code != undefined) {
                    this.icmpv4_code = data.icmpv4_code;
                }
                if ("arp_op" in data && data.arp_op != undefined) {
                    this.arp_op = data.arp_op;
                }
                if ("arp_spa" in data && data.arp_spa != undefined) {
                    this.arp_spa = data.arp_spa;
                }
                if ("arp_tpa" in data && data.arp_tpa != undefined) {
                    this.arp_tpa = data.arp_tpa;
                }
                if ("arp_sha" in data && data.arp_sha != undefined) {
                    this.arp_sha = data.arp_sha;
                }
                if ("arp_tha" in data && data.arp_tha != undefined) {
                    this.arp_tha = data.arp_tha;
                }
                if ("ipv6_src" in data && data.ipv6_src != undefined) {
                    this.ipv6_src = data.ipv6_src;
                }
                if ("ipv6_dst" in data && data.ipv6_dst != undefined) {
                    this.ipv6_dst = data.ipv6_dst;
                }
                if ("ipv6_flabel" in data && data.ipv6_flabel != undefined) {
                    this.ipv6_flabel = data.ipv6_flabel;
                }
                if ("icmpv6_type" in data && data.icmpv6_type != undefined) {
                    this.icmpv6_type = data.icmpv6_type;
                }
                if ("icmpv6_code" in data && data.icmpv6_code != undefined) {
                    this.icmpv6_code = data.icmpv6_code;
                }
                if ("ipv6_nd_target" in data && data.ipv6_nd_target != undefined) {
                    this.ipv6_nd_target = data.ipv6_nd_target;
                }
                if ("ipv6_nd_sll" in data && data.ipv6_nd_sll != undefined) {
                    this.ipv6_nd_sll = data.ipv6_nd_sll;
                }
                if ("ipv6_nd_tll" in data && data.ipv6_nd_tll != undefined) {
                    this.ipv6_nd_tll = data.ipv6_nd_tll;
                }
                if ("mpls_label" in data && data.mpls_label != undefined) {
                    this.mpls_label = data.mpls_label;
                }
                if ("mpls_tc" in data && data.mpls_tc != undefined) {
                    this.mpls_tc = data.mpls_tc;
                }
                if ("mpls_bos" in data && data.mpls_bos != undefined) {
                    this.mpls_bos = data.mpls_bos;
                }
                if ("pbb_isid" in data && data.pbb_isid != undefined) {
                    this.pbb_isid = data.pbb_isid;
                }
                if ("tunnel_id" in data && data.tunnel_id != undefined) {
                    this.tunnel_id = data.tunnel_id;
                }
                if ("ipv6_exthdr" in data && data.ipv6_exthdr != undefined) {
                    this.ipv6_exthdr = data.ipv6_exthdr;
                }
                if ("pbb_uca" in data && data.pbb_uca != undefined) {
                    this.pbb_uca = data.pbb_uca;
                }
                if ("tcp_flags" in data && data.tcp_flags != undefined) {
                    this.tcp_flags = data.tcp_flags;
                }
                if ("actset_output" in data && data.actset_output != undefined) {
                    this.actset_output = data.actset_output;
                }
            }
        }
        get eth_dst() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set eth_dst(value: string) {
            pb_1.Message.setOneofField(this, 1, [1], value);
        }
        get eth_src() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set eth_src(value: string) {
            pb_1.Message.setOneofField(this, 3, [3], value);
        }
        get eth_type() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set eth_type(value: string) {
            pb_1.Message.setOneofField(this, 5, [5], value);
        }
        get vlan_vid() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set vlan_vid(value: string) {
            pb_1.Message.setOneofField(this, 7, [7], value);
        }
        get vlan_pcp() {
            return pb_1.Message.getField(this, 9) as string;
        }
        set vlan_pcp(value: string) {
            pb_1.Message.setOneofField(this, 9, [9], value);
        }
        get ip_dscp() {
            return pb_1.Message.getField(this, 11) as string;
        }
        set ip_dscp(value: string) {
            pb_1.Message.setOneofField(this, 11, [11], value);
        }
        get ip_ecn() {
            return pb_1.Message.getField(this, 13) as string;
        }
        set ip_ecn(value: string) {
            pb_1.Message.setOneofField(this, 13, [13], value);
        }
        get ip_proto() {
            return pb_1.Message.getField(this, 15) as string;
        }
        set ip_proto(value: string) {
            pb_1.Message.setOneofField(this, 15, [15], value);
        }
        get ipv4_src() {
            return pb_1.Message.getField(this, 17) as string;
        }
        set ipv4_src(value: string) {
            pb_1.Message.setOneofField(this, 17, [17], value);
        }
        get ipv4_dst() {
            return pb_1.Message.getField(this, 19) as string;
        }
        set ipv4_dst(value: string) {
            pb_1.Message.setOneofField(this, 19, [19], value);
        }
        get tcp_src() {
            return pb_1.Message.getField(this, 21) as string;
        }
        set tcp_src(value: string) {
            pb_1.Message.setOneofField(this, 21, [21], value);
        }
        get tcp_dst() {
            return pb_1.Message.getField(this, 23) as string;
        }
        set tcp_dst(value: string) {
            pb_1.Message.setOneofField(this, 23, [23], value);
        }
        get udp_src() {
            return pb_1.Message.getField(this, 25) as string;
        }
        set udp_src(value: string) {
            pb_1.Message.setOneofField(this, 25, [25], value);
        }
        get udp_dst() {
            return pb_1.Message.getField(this, 27) as string;
        }
        set udp_dst(value: string) {
            pb_1.Message.setOneofField(this, 27, [27], value);
        }
        get sctp_src() {
            return pb_1.Message.getField(this, 29) as string;
        }
        set sctp_src(value: string) {
            pb_1.Message.setOneofField(this, 29, [29], value);
        }
        get sctp_dst() {
            return pb_1.Message.getField(this, 31) as string;
        }
        set sctp_dst(value: string) {
            pb_1.Message.setOneofField(this, 31, [31], value);
        }
        get icmpv4_type() {
            return pb_1.Message.getField(this, 33) as string;
        }
        set icmpv4_type(value: string) {
            pb_1.Message.setOneofField(this, 33, [33], value);
        }
        get icmpv4_code() {
            return pb_1.Message.getField(this, 35) as string;
        }
        set icmpv4_code(value: string) {
            pb_1.Message.setOneofField(this, 35, [35], value);
        }
        get arp_op() {
            return pb_1.Message.getField(this, 37) as string;
        }
        set arp_op(value: string) {
            pb_1.Message.setOneofField(this, 37, [37], value);
        }
        get arp_spa() {
            return pb_1.Message.getField(this, 39) as string;
        }
        set arp_spa(value: string) {
            pb_1.Message.setOneofField(this, 39, [39], value);
        }
        get arp_tpa() {
            return pb_1.Message.getField(this, 41) as string;
        }
        set arp_tpa(value: string) {
            pb_1.Message.setOneofField(this, 41, [41], value);
        }
        get arp_sha() {
            return pb_1.Message.getField(this, 43) as string;
        }
        set arp_sha(value: string) {
            pb_1.Message.setOneofField(this, 43, [43], value);
        }
        get arp_tha() {
            return pb_1.Message.getField(this, 45) as string;
        }
        set arp_tha(value: string) {
            pb_1.Message.setOneofField(this, 45, [45], value);
        }
        get ipv6_src() {
            return pb_1.Message.getField(this, 47) as string;
        }
        set ipv6_src(value: string) {
            pb_1.Message.setOneofField(this, 47, [47], value);
        }
        get ipv6_dst() {
            return pb_1.Message.getField(this, 49) as string;
        }
        set ipv6_dst(value: string) {
            pb_1.Message.setOneofField(this, 49, [49], value);
        }
        get ipv6_flabel() {
            return pb_1.Message.getField(this, 51) as string;
        }
        set ipv6_flabel(value: string) {
            pb_1.Message.setOneofField(this, 51, [51], value);
        }
        get icmpv6_type() {
            return pb_1.Message.getField(this, 53) as string;
        }
        set icmpv6_type(value: string) {
            pb_1.Message.setOneofField(this, 53, [53], value);
        }
        get icmpv6_code() {
            return pb_1.Message.getField(this, 55) as string;
        }
        set icmpv6_code(value: string) {
            pb_1.Message.setOneofField(this, 55, [55], value);
        }
        get ipv6_nd_target() {
            return pb_1.Message.getField(this, 57) as string;
        }
        set ipv6_nd_target(value: string) {
            pb_1.Message.setOneofField(this, 57, [57], value);
        }
        get ipv6_nd_sll() {
            return pb_1.Message.getField(this, 59) as string;
        }
        set ipv6_nd_sll(value: string) {
            pb_1.Message.setOneofField(this, 59, [59], value);
        }
        get ipv6_nd_tll() {
            return pb_1.Message.getField(this, 61) as string;
        }
        set ipv6_nd_tll(value: string) {
            pb_1.Message.setOneofField(this, 61, [61], value);
        }
        get mpls_label() {
            return pb_1.Message.getField(this, 63) as string;
        }
        set mpls_label(value: string) {
            pb_1.Message.setOneofField(this, 63, [63], value);
        }
        get mpls_tc() {
            return pb_1.Message.getField(this, 65) as string;
        }
        set mpls_tc(value: string) {
            pb_1.Message.setOneofField(this, 65, [65], value);
        }
        get mpls_bos() {
            return pb_1.Message.getField(this, 67) as string;
        }
        set mpls_bos(value: string) {
            pb_1.Message.setOneofField(this, 67, [67], value);
        }
        get pbb_isid() {
            return pb_1.Message.getField(this, 69) as string;
        }
        set pbb_isid(value: string) {
            pb_1.Message.setOneofField(this, 69, [69], value);
        }
        get tunnel_id() {
            return pb_1.Message.getField(this, 71) as string;
        }
        set tunnel_id(value: string) {
            pb_1.Message.setOneofField(this, 71, [71], value);
        }
        get ipv6_exthdr() {
            return pb_1.Message.getField(this, 73) as string;
        }
        set ipv6_exthdr(value: string) {
            pb_1.Message.setOneofField(this, 73, [73], value);
        }
        get pbb_uca() {
            return pb_1.Message.getField(this, 75) as string;
        }
        set pbb_uca(value: string) {
            pb_1.Message.setOneofField(this, 75, [75], value);
        }
        get tcp_flags() {
            return pb_1.Message.getField(this, 77) as string;
        }
        set tcp_flags(value: string) {
            pb_1.Message.setOneofField(this, 77, [77], value);
        }
        get actset_output() {
            return pb_1.Message.getField(this, 101) as string;
        }
        set actset_output(value: string) {
            pb_1.Message.setOneofField(this, 101, [101], value);
        }
        get _eth_dst() {
            const cases: {
                [index: number]: "none" | "eth_dst";
            } = {
                0: "none",
                1: "eth_dst"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _eth_src() {
            const cases: {
                [index: number]: "none" | "eth_src";
            } = {
                0: "none",
                3: "eth_src"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _eth_type() {
            const cases: {
                [index: number]: "none" | "eth_type";
            } = {
                0: "none",
                5: "eth_type"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _vlan_vid() {
            const cases: {
                [index: number]: "none" | "vlan_vid";
            } = {
                0: "none",
                7: "vlan_vid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        get _vlan_pcp() {
            const cases: {
                [index: number]: "none" | "vlan_pcp";
            } = {
                0: "none",
                9: "vlan_pcp"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9])];
        }
        get _ip_dscp() {
            const cases: {
                [index: number]: "none" | "ip_dscp";
            } = {
                0: "none",
                11: "ip_dscp"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11])];
        }
        get _ip_ecn() {
            const cases: {
                [index: number]: "none" | "ip_ecn";
            } = {
                0: "none",
                13: "ip_ecn"
            };
            return cases[pb_1.Message.computeOneofCase(this, [13])];
        }
        get _ip_proto() {
            const cases: {
                [index: number]: "none" | "ip_proto";
            } = {
                0: "none",
                15: "ip_proto"
            };
            return cases[pb_1.Message.computeOneofCase(this, [15])];
        }
        get _ipv4_src() {
            const cases: {
                [index: number]: "none" | "ipv4_src";
            } = {
                0: "none",
                17: "ipv4_src"
            };
            return cases[pb_1.Message.computeOneofCase(this, [17])];
        }
        get _ipv4_dst() {
            const cases: {
                [index: number]: "none" | "ipv4_dst";
            } = {
                0: "none",
                19: "ipv4_dst"
            };
            return cases[pb_1.Message.computeOneofCase(this, [19])];
        }
        get _tcp_src() {
            const cases: {
                [index: number]: "none" | "tcp_src";
            } = {
                0: "none",
                21: "tcp_src"
            };
            return cases[pb_1.Message.computeOneofCase(this, [21])];
        }
        get _tcp_dst() {
            const cases: {
                [index: number]: "none" | "tcp_dst";
            } = {
                0: "none",
                23: "tcp_dst"
            };
            return cases[pb_1.Message.computeOneofCase(this, [23])];
        }
        get _udp_src() {
            const cases: {
                [index: number]: "none" | "udp_src";
            } = {
                0: "none",
                25: "udp_src"
            };
            return cases[pb_1.Message.computeOneofCase(this, [25])];
        }
        get _udp_dst() {
            const cases: {
                [index: number]: "none" | "udp_dst";
            } = {
                0: "none",
                27: "udp_dst"
            };
            return cases[pb_1.Message.computeOneofCase(this, [27])];
        }
        get _sctp_src() {
            const cases: {
                [index: number]: "none" | "sctp_src";
            } = {
                0: "none",
                29: "sctp_src"
            };
            return cases[pb_1.Message.computeOneofCase(this, [29])];
        }
        get _sctp_dst() {
            const cases: {
                [index: number]: "none" | "sctp_dst";
            } = {
                0: "none",
                31: "sctp_dst"
            };
            return cases[pb_1.Message.computeOneofCase(this, [31])];
        }
        get _icmpv4_type() {
            const cases: {
                [index: number]: "none" | "icmpv4_type";
            } = {
                0: "none",
                33: "icmpv4_type"
            };
            return cases[pb_1.Message.computeOneofCase(this, [33])];
        }
        get _icmpv4_code() {
            const cases: {
                [index: number]: "none" | "icmpv4_code";
            } = {
                0: "none",
                35: "icmpv4_code"
            };
            return cases[pb_1.Message.computeOneofCase(this, [35])];
        }
        get _arp_op() {
            const cases: {
                [index: number]: "none" | "arp_op";
            } = {
                0: "none",
                37: "arp_op"
            };
            return cases[pb_1.Message.computeOneofCase(this, [37])];
        }
        get _arp_spa() {
            const cases: {
                [index: number]: "none" | "arp_spa";
            } = {
                0: "none",
                39: "arp_spa"
            };
            return cases[pb_1.Message.computeOneofCase(this, [39])];
        }
        get _arp_tpa() {
            const cases: {
                [index: number]: "none" | "arp_tpa";
            } = {
                0: "none",
                41: "arp_tpa"
            };
            return cases[pb_1.Message.computeOneofCase(this, [41])];
        }
        get _arp_sha() {
            const cases: {
                [index: number]: "none" | "arp_sha";
            } = {
                0: "none",
                43: "arp_sha"
            };
            return cases[pb_1.Message.computeOneofCase(this, [43])];
        }
        get _arp_tha() {
            const cases: {
                [index: number]: "none" | "arp_tha";
            } = {
                0: "none",
                45: "arp_tha"
            };
            return cases[pb_1.Message.computeOneofCase(this, [45])];
        }
        get _ipv6_src() {
            const cases: {
                [index: number]: "none" | "ipv6_src";
            } = {
                0: "none",
                47: "ipv6_src"
            };
            return cases[pb_1.Message.computeOneofCase(this, [47])];
        }
        get _ipv6_dst() {
            const cases: {
                [index: number]: "none" | "ipv6_dst";
            } = {
                0: "none",
                49: "ipv6_dst"
            };
            return cases[pb_1.Message.computeOneofCase(this, [49])];
        }
        get _ipv6_flabel() {
            const cases: {
                [index: number]: "none" | "ipv6_flabel";
            } = {
                0: "none",
                51: "ipv6_flabel"
            };
            return cases[pb_1.Message.computeOneofCase(this, [51])];
        }
        get _icmpv6_type() {
            const cases: {
                [index: number]: "none" | "icmpv6_type";
            } = {
                0: "none",
                53: "icmpv6_type"
            };
            return cases[pb_1.Message.computeOneofCase(this, [53])];
        }
        get _icmpv6_code() {
            const cases: {
                [index: number]: "none" | "icmpv6_code";
            } = {
                0: "none",
                55: "icmpv6_code"
            };
            return cases[pb_1.Message.computeOneofCase(this, [55])];
        }
        get _ipv6_nd_target() {
            const cases: {
                [index: number]: "none" | "ipv6_nd_target";
            } = {
                0: "none",
                57: "ipv6_nd_target"
            };
            return cases[pb_1.Message.computeOneofCase(this, [57])];
        }
        get _ipv6_nd_sll() {
            const cases: {
                [index: number]: "none" | "ipv6_nd_sll";
            } = {
                0: "none",
                59: "ipv6_nd_sll"
            };
            return cases[pb_1.Message.computeOneofCase(this, [59])];
        }
        get _ipv6_nd_tll() {
            const cases: {
                [index: number]: "none" | "ipv6_nd_tll";
            } = {
                0: "none",
                61: "ipv6_nd_tll"
            };
            return cases[pb_1.Message.computeOneofCase(this, [61])];
        }
        get _mpls_label() {
            const cases: {
                [index: number]: "none" | "mpls_label";
            } = {
                0: "none",
                63: "mpls_label"
            };
            return cases[pb_1.Message.computeOneofCase(this, [63])];
        }
        get _mpls_tc() {
            const cases: {
                [index: number]: "none" | "mpls_tc";
            } = {
                0: "none",
                65: "mpls_tc"
            };
            return cases[pb_1.Message.computeOneofCase(this, [65])];
        }
        get _mpls_bos() {
            const cases: {
                [index: number]: "none" | "mpls_bos";
            } = {
                0: "none",
                67: "mpls_bos"
            };
            return cases[pb_1.Message.computeOneofCase(this, [67])];
        }
        get _pbb_isid() {
            const cases: {
                [index: number]: "none" | "pbb_isid";
            } = {
                0: "none",
                69: "pbb_isid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [69])];
        }
        get _tunnel_id() {
            const cases: {
                [index: number]: "none" | "tunnel_id";
            } = {
                0: "none",
                71: "tunnel_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [71])];
        }
        get _ipv6_exthdr() {
            const cases: {
                [index: number]: "none" | "ipv6_exthdr";
            } = {
                0: "none",
                73: "ipv6_exthdr"
            };
            return cases[pb_1.Message.computeOneofCase(this, [73])];
        }
        get _pbb_uca() {
            const cases: {
                [index: number]: "none" | "pbb_uca";
            } = {
                0: "none",
                75: "pbb_uca"
            };
            return cases[pb_1.Message.computeOneofCase(this, [75])];
        }
        get _tcp_flags() {
            const cases: {
                [index: number]: "none" | "tcp_flags";
            } = {
                0: "none",
                77: "tcp_flags"
            };
            return cases[pb_1.Message.computeOneofCase(this, [77])];
        }
        get _actset_output() {
            const cases: {
                [index: number]: "none" | "actset_output";
            } = {
                0: "none",
                101: "actset_output"
            };
            return cases[pb_1.Message.computeOneofCase(this, [101])];
        }
        toObject() {
            const data: {
                eth_dst?: string;
                eth_src?: string;
                eth_type?: string;
                vlan_vid?: string;
                vlan_pcp?: string;
                ip_dscp?: string;
                ip_ecn?: string;
                ip_proto?: string;
                ipv4_src?: string;
                ipv4_dst?: string;
                tcp_src?: string;
                tcp_dst?: string;
                udp_src?: string;
                udp_dst?: string;
                sctp_src?: string;
                sctp_dst?: string;
                icmpv4_type?: string;
                icmpv4_code?: string;
                arp_op?: string;
                arp_spa?: string;
                arp_tpa?: string;
                arp_sha?: string;
                arp_tha?: string;
                ipv6_src?: string;
                ipv6_dst?: string;
                ipv6_flabel?: string;
                icmpv6_type?: string;
                icmpv6_code?: string;
                ipv6_nd_target?: string;
                ipv6_nd_sll?: string;
                ipv6_nd_tll?: string;
                mpls_label?: string;
                mpls_tc?: string;
                mpls_bos?: string;
                pbb_isid?: string;
                tunnel_id?: string;
                ipv6_exthdr?: string;
                pbb_uca?: string;
                tcp_flags?: string;
                actset_output?: string;
            } = {};
            if (this.eth_dst != null) {
                data.eth_dst = this.eth_dst;
            }
            if (this.eth_src != null) {
                data.eth_src = this.eth_src;
            }
            if (this.eth_type != null) {
                data.eth_type = this.eth_type;
            }
            if (this.vlan_vid != null) {
                data.vlan_vid = this.vlan_vid;
            }
            if (this.vlan_pcp != null) {
                data.vlan_pcp = this.vlan_pcp;
            }
            if (this.ip_dscp != null) {
                data.ip_dscp = this.ip_dscp;
            }
            if (this.ip_ecn != null) {
                data.ip_ecn = this.ip_ecn;
            }
            if (this.ip_proto != null) {
                data.ip_proto = this.ip_proto;
            }
            if (this.ipv4_src != null) {
                data.ipv4_src = this.ipv4_src;
            }
            if (this.ipv4_dst != null) {
                data.ipv4_dst = this.ipv4_dst;
            }
            if (this.tcp_src != null) {
                data.tcp_src = this.tcp_src;
            }
            if (this.tcp_dst != null) {
                data.tcp_dst = this.tcp_dst;
            }
            if (this.udp_src != null) {
                data.udp_src = this.udp_src;
            }
            if (this.udp_dst != null) {
                data.udp_dst = this.udp_dst;
            }
            if (this.sctp_src != null) {
                data.sctp_src = this.sctp_src;
            }
            if (this.sctp_dst != null) {
                data.sctp_dst = this.sctp_dst;
            }
            if (this.icmpv4_type != null) {
                data.icmpv4_type = this.icmpv4_type;
            }
            if (this.icmpv4_code != null) {
                data.icmpv4_code = this.icmpv4_code;
            }
            if (this.arp_op != null) {
                data.arp_op = this.arp_op;
            }
            if (this.arp_spa != null) {
                data.arp_spa = this.arp_spa;
            }
            if (this.arp_tpa != null) {
                data.arp_tpa = this.arp_tpa;
            }
            if (this.arp_sha != null) {
                data.arp_sha = this.arp_sha;
            }
            if (this.arp_tha != null) {
                data.arp_tha = this.arp_tha;
            }
            if (this.ipv6_src != null) {
                data.ipv6_src = this.ipv6_src;
            }
            if (this.ipv6_dst != null) {
                data.ipv6_dst = this.ipv6_dst;
            }
            if (this.ipv6_flabel != null) {
                data.ipv6_flabel = this.ipv6_flabel;
            }
            if (this.icmpv6_type != null) {
                data.icmpv6_type = this.icmpv6_type;
            }
            if (this.icmpv6_code != null) {
                data.icmpv6_code = this.icmpv6_code;
            }
            if (this.ipv6_nd_target != null) {
                data.ipv6_nd_target = this.ipv6_nd_target;
            }
            if (this.ipv6_nd_sll != null) {
                data.ipv6_nd_sll = this.ipv6_nd_sll;
            }
            if (this.ipv6_nd_tll != null) {
                data.ipv6_nd_tll = this.ipv6_nd_tll;
            }
            if (this.mpls_label != null) {
                data.mpls_label = this.mpls_label;
            }
            if (this.mpls_tc != null) {
                data.mpls_tc = this.mpls_tc;
            }
            if (this.mpls_bos != null) {
                data.mpls_bos = this.mpls_bos;
            }
            if (this.pbb_isid != null) {
                data.pbb_isid = this.pbb_isid;
            }
            if (this.tunnel_id != null) {
                data.tunnel_id = this.tunnel_id;
            }
            if (this.ipv6_exthdr != null) {
                data.ipv6_exthdr = this.ipv6_exthdr;
            }
            if (this.pbb_uca != null) {
                data.pbb_uca = this.pbb_uca;
            }
            if (this.tcp_flags != null) {
                data.tcp_flags = this.tcp_flags;
            }
            if (this.actset_output != null) {
                data.actset_output = this.actset_output;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.eth_dst === "string" && this.eth_dst.length)
                writer.writeString(1, this.eth_dst);
            if (typeof this.eth_src === "string" && this.eth_src.length)
                writer.writeString(3, this.eth_src);
            if (typeof this.eth_type === "string" && this.eth_type.length)
                writer.writeString(5, this.eth_type);
            if (typeof this.vlan_vid === "string" && this.vlan_vid.length)
                writer.writeString(7, this.vlan_vid);
            if (typeof this.vlan_pcp === "string" && this.vlan_pcp.length)
                writer.writeString(9, this.vlan_pcp);
            if (typeof this.ip_dscp === "string" && this.ip_dscp.length)
                writer.writeString(11, this.ip_dscp);
            if (typeof this.ip_ecn === "string" && this.ip_ecn.length)
                writer.writeString(13, this.ip_ecn);
            if (typeof this.ip_proto === "string" && this.ip_proto.length)
                writer.writeString(15, this.ip_proto);
            if (typeof this.ipv4_src === "string" && this.ipv4_src.length)
                writer.writeString(17, this.ipv4_src);
            if (typeof this.ipv4_dst === "string" && this.ipv4_dst.length)
                writer.writeString(19, this.ipv4_dst);
            if (typeof this.tcp_src === "string" && this.tcp_src.length)
                writer.writeString(21, this.tcp_src);
            if (typeof this.tcp_dst === "string" && this.tcp_dst.length)
                writer.writeString(23, this.tcp_dst);
            if (typeof this.udp_src === "string" && this.udp_src.length)
                writer.writeString(25, this.udp_src);
            if (typeof this.udp_dst === "string" && this.udp_dst.length)
                writer.writeString(27, this.udp_dst);
            if (typeof this.sctp_src === "string" && this.sctp_src.length)
                writer.writeString(29, this.sctp_src);
            if (typeof this.sctp_dst === "string" && this.sctp_dst.length)
                writer.writeString(31, this.sctp_dst);
            if (typeof this.icmpv4_type === "string" && this.icmpv4_type.length)
                writer.writeString(33, this.icmpv4_type);
            if (typeof this.icmpv4_code === "string" && this.icmpv4_code.length)
                writer.writeString(35, this.icmpv4_code);
            if (typeof this.arp_op === "string" && this.arp_op.length)
                writer.writeString(37, this.arp_op);
            if (typeof this.arp_spa === "string" && this.arp_spa.length)
                writer.writeString(39, this.arp_spa);
            if (typeof this.arp_tpa === "string" && this.arp_tpa.length)
                writer.writeString(41, this.arp_tpa);
            if (typeof this.arp_sha === "string" && this.arp_sha.length)
                writer.writeString(43, this.arp_sha);
            if (typeof this.arp_tha === "string" && this.arp_tha.length)
                writer.writeString(45, this.arp_tha);
            if (typeof this.ipv6_src === "string" && this.ipv6_src.length)
                writer.writeString(47, this.ipv6_src);
            if (typeof this.ipv6_dst === "string" && this.ipv6_dst.length)
                writer.writeString(49, this.ipv6_dst);
            if (typeof this.ipv6_flabel === "string" && this.ipv6_flabel.length)
                writer.writeString(51, this.ipv6_flabel);
            if (typeof this.icmpv6_type === "string" && this.icmpv6_type.length)
                writer.writeString(53, this.icmpv6_type);
            if (typeof this.icmpv6_code === "string" && this.icmpv6_code.length)
                writer.writeString(55, this.icmpv6_code);
            if (typeof this.ipv6_nd_target === "string" && this.ipv6_nd_target.length)
                writer.writeString(57, this.ipv6_nd_target);
            if (typeof this.ipv6_nd_sll === "string" && this.ipv6_nd_sll.length)
                writer.writeString(59, this.ipv6_nd_sll);
            if (typeof this.ipv6_nd_tll === "string" && this.ipv6_nd_tll.length)
                writer.writeString(61, this.ipv6_nd_tll);
            if (typeof this.mpls_label === "string" && this.mpls_label.length)
                writer.writeString(63, this.mpls_label);
            if (typeof this.mpls_tc === "string" && this.mpls_tc.length)
                writer.writeString(65, this.mpls_tc);
            if (typeof this.mpls_bos === "string" && this.mpls_bos.length)
                writer.writeString(67, this.mpls_bos);
            if (typeof this.pbb_isid === "string" && this.pbb_isid.length)
                writer.writeString(69, this.pbb_isid);
            if (typeof this.tunnel_id === "string" && this.tunnel_id.length)
                writer.writeString(71, this.tunnel_id);
            if (typeof this.ipv6_exthdr === "string" && this.ipv6_exthdr.length)
                writer.writeString(73, this.ipv6_exthdr);
            if (typeof this.pbb_uca === "string" && this.pbb_uca.length)
                writer.writeString(75, this.pbb_uca);
            if (typeof this.tcp_flags === "string" && this.tcp_flags.length)
                writer.writeString(77, this.tcp_flags);
            if (typeof this.actset_output === "string" && this.actset_output.length)
                writer.writeString(101, this.actset_output);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Packet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Packet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.eth_dst = reader.readString();
                        break;
                    case 3:
                        message.eth_src = reader.readString();
                        break;
                    case 5:
                        message.eth_type = reader.readString();
                        break;
                    case 7:
                        message.vlan_vid = reader.readString();
                        break;
                    case 9:
                        message.vlan_pcp = reader.readString();
                        break;
                    case 11:
                        message.ip_dscp = reader.readString();
                        break;
                    case 13:
                        message.ip_ecn = reader.readString();
                        break;
                    case 15:
                        message.ip_proto = reader.readString();
                        break;
                    case 17:
                        message.ipv4_src = reader.readString();
                        break;
                    case 19:
                        message.ipv4_dst = reader.readString();
                        break;
                    case 21:
                        message.tcp_src = reader.readString();
                        break;
                    case 23:
                        message.tcp_dst = reader.readString();
                        break;
                    case 25:
                        message.udp_src = reader.readString();
                        break;
                    case 27:
                        message.udp_dst = reader.readString();
                        break;
                    case 29:
                        message.sctp_src = reader.readString();
                        break;
                    case 31:
                        message.sctp_dst = reader.readString();
                        break;
                    case 33:
                        message.icmpv4_type = reader.readString();
                        break;
                    case 35:
                        message.icmpv4_code = reader.readString();
                        break;
                    case 37:
                        message.arp_op = reader.readString();
                        break;
                    case 39:
                        message.arp_spa = reader.readString();
                        break;
                    case 41:
                        message.arp_tpa = reader.readString();
                        break;
                    case 43:
                        message.arp_sha = reader.readString();
                        break;
                    case 45:
                        message.arp_tha = reader.readString();
                        break;
                    case 47:
                        message.ipv6_src = reader.readString();
                        break;
                    case 49:
                        message.ipv6_dst = reader.readString();
                        break;
                    case 51:
                        message.ipv6_flabel = reader.readString();
                        break;
                    case 53:
                        message.icmpv6_type = reader.readString();
                        break;
                    case 55:
                        message.icmpv6_code = reader.readString();
                        break;
                    case 57:
                        message.ipv6_nd_target = reader.readString();
                        break;
                    case 59:
                        message.ipv6_nd_sll = reader.readString();
                        break;
                    case 61:
                        message.ipv6_nd_tll = reader.readString();
                        break;
                    case 63:
                        message.mpls_label = reader.readString();
                        break;
                    case 65:
                        message.mpls_tc = reader.readString();
                        break;
                    case 67:
                        message.mpls_bos = reader.readString();
                        break;
                    case 69:
                        message.pbb_isid = reader.readString();
                        break;
                    case 71:
                        message.tunnel_id = reader.readString();
                        break;
                    case 73:
                        message.ipv6_exthdr = reader.readString();
                        break;
                    case 75:
                        message.pbb_uca = reader.readString();
                        break;
                    case 77:
                        message.tcp_flags = reader.readString();
                        break;
                    case 101:
                        message.actset_output = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Packet {
            return Packet.deserialize(bytes);
        }
    }
    export class PacketArc extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            src?: string;
        }) | ({
            pkt?: Packet;
        }) | ({
            dst?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1], [2], [3]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("src" in data && data.src != undefined) {
                    this.src = data.src;
                }
                if ("pkt" in data && data.pkt != undefined) {
                    this.pkt = data.pkt;
                }
                if ("dst" in data && data.dst != undefined) {
                    this.dst = data.dst;
                }
            }
        }
        get src() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set src(value: string) {
            pb_1.Message.setOneofField(this, 1, [1], value);
        }
        get pkt() {
            return pb_1.Message.getWrapperField(this, Packet, 2) as Packet;
        }
        set pkt(value: Packet) {
            pb_1.Message.setOneofWrapperField(this, 2, [2], value);
        }
        get dst() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set dst(value: string) {
            pb_1.Message.setOneofField(this, 3, [3], value);
        }
        get _src() {
            const cases: {
                [index: number]: "none" | "src";
            } = {
                0: "none",
                1: "src"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _pkt() {
            const cases: {
                [index: number]: "none" | "pkt";
            } = {
                0: "none",
                2: "pkt"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _dst() {
            const cases: {
                [index: number]: "none" | "dst";
            } = {
                0: "none",
                3: "dst"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        toObject() {
            const data: {
                src?: string;
                pkt?: ReturnType<typeof Packet.prototype.toObject>;
                dst?: string;
            } = {};
            if (this.src != null) {
                data.src = this.src;
            }
            if (this.pkt != null) {
                data.pkt = this.pkt.toObject();
            }
            if (this.dst != null) {
                data.dst = this.dst;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.src === "string" && this.src.length)
                writer.writeString(1, this.src);
            if (this.pkt !== undefined)
                writer.writeMessage(2, this.pkt, () => this.pkt.serialize(writer));
            if (typeof this.dst === "string" && this.dst.length)
                writer.writeString(3, this.dst);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PacketArc {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PacketArc();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.src = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.pkt, () => message.pkt = Packet.deserialize(reader));
                        break;
                    case 3:
                        message.dst = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PacketArc {
            return PacketArc.deserialize(bytes);
        }
    }
    export class PacketTrace extends pb_1.Message {
        constructor(data?: any[] | ({
            arcs?: PacketArc[];
        } & (({
            protocol?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], [[2]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arcs" in data && data.arcs != undefined) {
                    this.arcs = data.arcs;
                }
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
            }
        }
        get arcs() {
            return pb_1.Message.getRepeatedWrapperField(this, PacketArc, 1) as PacketArc[];
        }
        set arcs(value: PacketArc[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get protocol() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set protocol(value: string) {
            pb_1.Message.setOneofField(this, 2, [2], value);
        }
        get _protocol() {
            const cases: {
                [index: number]: "none" | "protocol";
            } = {
                0: "none",
                2: "protocol"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        toObject() {
            const data: {
                arcs?: ReturnType<typeof PacketArc.prototype.toObject>[];
                protocol?: string;
            } = {};
            if (this.arcs != null) {
                data.arcs = this.arcs.map((item: PacketArc) => item.toObject());
            }
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.arcs !== undefined)
                writer.writeRepeatedMessage(1, this.arcs, (item: PacketArc) => item.serialize(writer));
            if (typeof this.protocol === "string" && this.protocol.length)
                writer.writeString(2, this.protocol);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PacketTrace {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PacketTrace();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.arcs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PacketArc.deserialize(reader), PacketArc));
                        break;
                    case 2:
                        message.protocol = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PacketTrace {
            return PacketTrace.deserialize(bytes);
        }
    }
    export class StartTracingRequest extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            option?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("option" in data && data.option != undefined) {
                    this.option = data.option;
                }
            }
        }
        get option() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set option(value: number) {
            pb_1.Message.setOneofField(this, 1, [1], value);
        }
        get _option() {
            const cases: {
                [index: number]: "none" | "option";
            } = {
                0: "none",
                1: "option"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        toObject() {
            const data: {
                option?: number;
            } = {};
            if (this.option != null) {
                data.option = this.option;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.option !== undefined)
                writer.writeSint32(1, this.option);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartTracingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartTracingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.option = reader.readSint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartTracingRequest {
            return StartTracingRequest.deserialize(bytes);
        }
    }
    export class StopTracingRequest extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            option?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("option" in data && data.option != undefined) {
                    this.option = data.option;
                }
            }
        }
        get option() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set option(value: number) {
            pb_1.Message.setOneofField(this, 1, [1], value);
        }
        get _option() {
            const cases: {
                [index: number]: "none" | "option";
            } = {
                0: "none",
                1: "option"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        toObject() {
            const data: {
                option?: number;
            } = {};
            if (this.option != null) {
                data.option = this.option;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.option !== undefined)
                writer.writeSint32(1, this.option);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StopTracingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopTracingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.option = reader.readSint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StopTracingRequest {
            return StopTracingRequest.deserialize(bytes);
        }
    }
    export class GetTraceRequest extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            option?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("option" in data && data.option != undefined) {
                    this.option = data.option;
                }
            }
        }
        get option() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set option(value: number) {
            pb_1.Message.setOneofField(this, 1, [1], value);
        }
        get _option() {
            const cases: {
                [index: number]: "none" | "option";
            } = {
                0: "none",
                1: "option"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        toObject() {
            const data: {
                option?: number;
            } = {};
            if (this.option != null) {
                data.option = this.option;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.option !== undefined)
                writer.writeSint32(1, this.option);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTraceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTraceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.option = reader.readSint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTraceRequest {
            return GetTraceRequest.deserialize(bytes);
        }
    }
    export class TopoChangeResult extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            status?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set status(value: number) {
            pb_1.Message.setOneofField(this, 1, [1], value);
        }
        get _status() {
            const cases: {
                [index: number]: "none" | "status";
            } = {
                0: "none",
                1: "status"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        toObject() {
            const data: {
                status?: number;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status !== undefined)
                writer.writeSint32(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TopoChangeResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TopoChangeResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readSint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TopoChangeResult {
            return TopoChangeResult.deserialize(bytes);
        }
    }
    export class HostCommand extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            host?: string;
        }) | ({
            command?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1], [2]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("host" in data && data.host != undefined) {
                    this.host = data.host;
                }
                if ("command" in data && data.command != undefined) {
                    this.command = data.command;
                }
            }
        }
        get host() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set host(value: string) {
            pb_1.Message.setOneofField(this, 1, [1], value);
        }
        get command() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set command(value: string) {
            pb_1.Message.setOneofField(this, 2, [2], value);
        }
        get _host() {
            const cases: {
                [index: number]: "none" | "host";
            } = {
                0: "none",
                1: "host"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _command() {
            const cases: {
                [index: number]: "none" | "command";
            } = {
                0: "none",
                2: "command"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        toObject() {
            const data: {
                host?: string;
                command?: string;
            } = {};
            if (this.host != null) {
                data.host = this.host;
            }
            if (this.command != null) {
                data.command = this.command;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.host === "string" && this.host.length)
                writer.writeString(1, this.host);
            if (typeof this.command === "string" && this.command.length)
                writer.writeString(2, this.command);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HostCommand {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HostCommand();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.host = reader.readString();
                        break;
                    case 2:
                        message.command = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HostCommand {
            return HostCommand.deserialize(bytes);
        }
    }
    export class MininetCommand extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            command?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("command" in data && data.command != undefined) {
                    this.command = data.command;
                }
            }
        }
        get command() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set command(value: string) {
            pb_1.Message.setOneofField(this, 1, [1], value);
        }
        get _command() {
            const cases: {
                [index: number]: "none" | "command";
            } = {
                0: "none",
                1: "command"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        toObject() {
            const data: {
                command?: string;
            } = {};
            if (this.command != null) {
                data.command = this.command;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.command === "string" && this.command.length)
                writer.writeString(1, this.command);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MininetCommand {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MininetCommand();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.command = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MininetCommand {
            return MininetCommand.deserialize(bytes);
        }
    }
    export class CommandResult extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            result?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set result(value: string) {
            pb_1.Message.setOneofField(this, 1, [1], value);
        }
        get _result() {
            const cases: {
                [index: number]: "none" | "result";
            } = {
                0: "none",
                1: "result"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        toObject() {
            const data: {
                result?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.result === "string" && this.result.length)
                writer.writeString(1, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommandResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommandResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommandResult {
            return CommandResult.deserialize(bytes);
        }
    }
}
