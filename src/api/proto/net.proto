/**
 * これは，システムで使用するメッセージの構造を記述したものです．
 * ここで書かれたものを基準にして，各インターフェースを記述します．
 *
 * Notes:
 *     * あくまで，システム上で使用するものなので完全にOpenFlowプロトコルに準拠しているわけではない．
 *     * protobuf version 3.15.8 で動作確認済み
 *
 * TODO:
 *    * テーブルの要素は単純にdictで読ませるのもあり
 *    * フローエントリに関しては，goto tableと action set apply action を分けて保存すればいいのでは？？？
 */

syntax = "proto3";

package proto;

/**
 * Host structure
 */
message Host{
  optional string name = 1;
  /** ip address (e.g. 192.168.1.1/24) */
  optional string ip = 2;
  /** mac address */
  optional string mac = 3;
}

/**
 * Switch
 */
message Switch{
  optional string name = 1;
  optional string datapath_id = 2;
}

/**
 * Link
 */
message Link{
  optional string name = 1;
  optional string host1 = 2;
  optional string host2 = 3;
}

/**
 * RemoteController
 *
 * todo:
 *     * implement
 */
message RemoteController{
  string controller_ip = 1;
  int32 controller_port = 2;
}

/**
 * Packet
 *
 * todo:
 *    implement
 */
message Packet{
  float timestamp = 2;
  string in_port = 3;
  string in_phy_port = 4;
  /** packet fileds */
  map<string, string> fields = 1;
}

/**
 * OpenFlow Instruction Type
 *
 * Notes:
 *    * 対応していないものも含まれています．
 */
enum InstructionType {
  OFPIT_INVALID    = 0;
  OFPIT_GOTO_TABLE = 1;
  OFPIT_WRITE_METADATA = 2;
  OFPIT_WRITE_ACTIONS = 3;
  OFPIT_APPLY_ACTIONS = 4;
  OFPIT_CLEAR_ACTIONS = 5;
  OFPIT_METER = 6;

  OFPIT_EXPERIMENTER = 0xFFFF;
};

/**
 * OpenFlow Action struct
 */
message Action {
  /**
   * action string
   * これは可視化するだけなので，とりあえず文字列のみ
   */
  optional string str = 1;
}

/**
 * Action Set
 */
message ActionSet{
  // actions in Action Set
  repeated Action actions = 1;
}

/**
 * OpenFlow Instruction struct
 */
message Instruction{
  optional InstructionType type = 1;
  oneof data {
    InstructionGotoTable goto_table = 2;
    InstructionWriteMetadata write_metadata = 3;
    InstructionActions actions = 4;
    InstructionMeter meter = 5;
  }
}

/**
 * Instruction Goto Table
 */
message InstructionGotoTable{
  uint32 table_id = 1;
}

/**
 * Instruction Metadata
 */
message InstructionWriteMetadata{
  uint32 metadata = 1;
  uint32 metadata_mask = 2;
}

/**
 * Instruction for WRITE_ACTIONS/APPLY_ACTIONS/CLEAR_ACTIONS
 */
message InstructionActions{
  repeated Action actions = 1;
}

/**
 * Instruction Meter
 */
message InstructionMeter{
  uint32 meter_id = 1;
}

/**
 * OpenFlow Match struct
 */
message Match{
  optional string field_name = 1;
  optional string value = 2;
  optional string mask = 3;
}

/**
 * Flow struct
 */
message Flow{
  optional string cookie = 1;
  optional float duration = 2;
  optional sint32 table = 3;
  optional sint32 n_packets = 4;
  optional sint32 n_bytes = 5;
  optional sint32 priority = 6;
  repeated Match match = 7;
  repeated Instruction actions = 8;
  /** flow identifier on the system */
  optional sint32 flow_id = 9;
}

/**
 * Flow Table structure
 */
message FlowTable{
  repeated Flow flows = 1;
  optional sint32 flowtables_id = 2;
}

/**
 * Packet OpenFlow Pipeline Processing structure
 */
message PacketProcessing{
  optional string switch = 1;
  /** flow table */
  optional FlowTable flow_table = 4;
  /** final action_set */
  optional ActionSet action_set = 5;
  /** processing packet */
  repeated Packet pkts = 2;
  /** list of matched flow id */
  repeated sint32 matched_flows = 3;
  /** After applying actionset to packet*/
  optional Packet packet_after_action_set = 6;
  /** out_port to packet Mapping */
  map<string, Packet> outs = 7;
}

/*
 * Packet Arc
 */
message PacketArc{
  optional string src = 1;
  optional Packet pkt = 2;
  /** packet processing information on src switch */
  optional PacketProcessing packet_processing = 4;

  optional string edge = 5;
  optional string dst = 3;
  optional string dst_interface = 6;
}


/**
 * packet trace
 */
message PacketTrace{
  double timestamp = 3;
  repeated PacketArc arcs = 1;
  optional string protocol = 2;
}


// ---------------------------------------------
// Request/Reply Message
// ---------------------------------------------


/**
 * Topology Request
 *
 * todo: implement
 */ 
message ChangeTopologyRequest{
  repeated Switch switches = 1;
  repeated Host hosts = 2;
  repeated Link links = 3;
  // todo: remove
  optional RemoteController controller = 4;
}

/**
 * todo: implement
 */
message GetFeaturesRequest{
  repeated Switch switches = 1;
  repeated Host hosts = 2;
  repeated Link links = 3;
}

/**
 * StartNetworkOption
 */
enum StartNetworkOption {
  NO_OPTION = 0;
}

/**
 * Start Network Request
 * 
 * todo: implement
 */
message StartNetworkRequest {
  StartNetworkOption option = 1;
}

/**
 * start tracing request
 */
message StartTracingRequest {
  optional sint32 option = 1;
}

/**
 * stop tracing request
 */
message StopTracingRequest {
  optional sint32 option = 1;
}

/**
 * Get traces Request
 */
message GetTraceRequest {
  optional sint32 option = 1;
}

/**
 * Get traces Result
 *
 * todo: optionをつけてみる？？
 */
message GetTraceResult {
  optional int32 traces_length = 2;
  repeated PacketTrace packet_traces = 1;
}

/**
 * Topology Change Result
 */
message TopoChangeResult{
  optional sint32 status = 1;
}

/**
 * CommandType (todo later)
 */
enum CommandType{
  NOMAL = 0;
  SIGINT = 1;
}

/**
 * Host Command Request
 */
message HostCommand{
  optional string host = 1;
  optional string command = 2;
  optional CommandResultType type = 3;
}

/**
 * Mininet Command Request
 */
message MininetCommand{
  optional string command = 1;
  optional CommandType type = 2;
}

/**
 * comment result type
 */
enum CommandResultType{
  /** stdout */
  OUTPUT = 0;
  /** stderr */
  ERROR = 1;
  /** commad result end */
  END_SIGNAL = 100;
}

/**
 * Command Result
 */
message CommandResult {
  /** Command result type */
  optional CommandResultType type = 1;
  /** Command result string */
  optional string result = 2;
}

// ---------------------------------------------
// Service
// ---------------------------------------------

message NoneReply {}

service P2VService {
  rpc StartTracing(StartTracingRequest) returns (NoneReply) {}
  rpc StopTracing(StopTracingRequest) returns (NoneReply) {}

  rpc AddHost(Host) returns (Host) {}
  rpc RemoveHost(Host) returns (Host) {}
  rpc AddSwitch(Switch) returns (Switch) {}
  rpc RemoveSwitch(Switch) returns (Switch) {}
  rpc AddLink(Link) returns (Link) {}
  rpc RemoveLink(Link) returns (Link) {}
  rpc ChangeTopology(ChangeTopologyRequest) returns (NoneReply) {}

  rpc GetTrace(GetTraceRequest) returns (GetTraceResult) {}

  // to be stream
  rpc ExecMininetCommand(MininetCommand) returns (CommandResult) {}
}

